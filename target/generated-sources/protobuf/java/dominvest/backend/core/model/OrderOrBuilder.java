// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Order.proto

package dominvest.backend.core.model;

public interface OrderOrBuilder extends
    // @@protoc_insertion_point(interface_extends:dominvest.backend.core.model.Order)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Дата и время создания заявки. По факту сейчас передается дата и время создания записи в базе OMS.oms_order
   * </pre>
   *
   * <code>.dominvest.backend.core.model.DateTime createDateTime = 1;</code>
   */
  boolean hasCreateDateTime();
  /**
   * <pre>
   * Дата и время создания заявки. По факту сейчас передается дата и время создания записи в базе OMS.oms_order
   * </pre>
   *
   * <code>.dominvest.backend.core.model.DateTime createDateTime = 1;</code>
   */
  dominvest.backend.core.model.DateTime getCreateDateTime();
  /**
   * <pre>
   * Дата и время создания заявки. По факту сейчас передается дата и время создания записи в базе OMS.oms_order
   * </pre>
   *
   * <code>.dominvest.backend.core.model.DateTime createDateTime = 1;</code>
   */
  dominvest.backend.core.model.DateTimeOrBuilder getCreateDateTimeOrBuilder();

  /**
   * <pre>
   * Дата и время изменения заявки. Может заполняться так же createDateTime или не заполняться
   * </pre>
   *
   * <code>.dominvest.backend.core.model.DateTime changeDateTime = 2;</code>
   */
  boolean hasChangeDateTime();
  /**
   * <pre>
   * Дата и время изменения заявки. Может заполняться так же createDateTime или не заполняться
   * </pre>
   *
   * <code>.dominvest.backend.core.model.DateTime changeDateTime = 2;</code>
   */
  dominvest.backend.core.model.DateTime getChangeDateTime();
  /**
   * <pre>
   * Дата и время изменения заявки. Может заполняться так же createDateTime или не заполняться
   * </pre>
   *
   * <code>.dominvest.backend.core.model.DateTime changeDateTime = 2;</code>
   */
  dominvest.backend.core.model.DateTimeOrBuilder getChangeDateTimeOrBuilder();

  /**
   * <pre>
   * сквозной id клиента по всем БД ДОМ.Инвест
   * </pre>
   *
   * <code>string clientId = 3;</code>
   */
  java.lang.String getClientId();
  /**
   * <pre>
   * сквозной id клиента по всем БД ДОМ.Инвест
   * </pre>
   *
   * <code>string clientId = 3;</code>
   */
  com.google.protobuf.ByteString
      getClientIdBytes();

  /**
   * <pre>
   * Тикер
   * </pre>
   *
   * <code>string ticker = 4;</code>
   */
  java.lang.String getTicker();
  /**
   * <pre>
   * Тикер
   * </pre>
   *
   * <code>string ticker = 4;</code>
   */
  com.google.protobuf.ByteString
      getTickerBytes();

  /**
   * <pre>
   * id инструмента. Обычно строка из 3-х частей через точку: id инструмента, id борды, id биржи. Для не биржевых инструментов без режима торгов. Для валют просто RUB, EUR, USD
   * </pre>
   *
   * <code>string securityId = 5;</code>
   */
  java.lang.String getSecurityId();
  /**
   * <pre>
   * id инструмента. Обычно строка из 3-х частей через точку: id инструмента, id борды, id биржи. Для не биржевых инструментов без режима торгов. Для валют просто RUB, EUR, USD
   * </pre>
   *
   * <code>string securityId = 5;</code>
   */
  com.google.protobuf.ByteString
      getSecurityIdBytes();

  /**
   * <pre>
   * Тип заявки (по справочнику), строка
   * </pre>
   *
   * <code>.dominvest.backend.core.model.OrderType type = 6;</code>
   */
  int getTypeValue();
  /**
   * <pre>
   * Тип заявки (по справочнику), строка
   * </pre>
   *
   * <code>.dominvest.backend.core.model.OrderType type = 6;</code>
   */
  dominvest.backend.core.model.OrderType getType();

  /**
   * <pre>
   * При создании заявки ставится CREATE, при отмене заявки CANCEL
   * </pre>
   *
   * <code>.dominvest.backend.core.model.OrderAction action = 7;</code>
   */
  int getActionValue();
  /**
   * <pre>
   * При создании заявки ставится CREATE, при отмене заявки CANCEL
   * </pre>
   *
   * <code>.dominvest.backend.core.model.OrderAction action = 7;</code>
   */
  dominvest.backend.core.model.OrderAction getAction();

  /**
   * <pre>
   * Статус заявки (по справочнику)
   * </pre>
   *
   * <code>.dominvest.backend.core.model.OrderStatus status = 8;</code>
   */
  int getStatusValue();
  /**
   * <pre>
   * Статус заявки (по справочнику)
   * </pre>
   *
   * <code>.dominvest.backend.core.model.OrderStatus status = 8;</code>
   */
  dominvest.backend.core.model.OrderStatus getStatus();

  /**
   * <pre>
   * Причина отклонения заявки (по справочнику)
   * </pre>
   *
   * <code>.dominvest.backend.core.model.OrderFailReason failReason = 9;</code>
   */
  int getFailReasonValue();
  /**
   * <pre>
   * Причина отклонения заявки (по справочнику)
   * </pre>
   *
   * <code>.dominvest.backend.core.model.OrderFailReason failReason = 9;</code>
   */
  dominvest.backend.core.model.OrderFailReason getFailReason();

  /**
   * <pre>
   * Текст, причина отклонения заявки, например order is not accepted in this trading session
   * </pre>
   *
   * <code>string failText = 10;</code>
   */
  java.lang.String getFailText();
  /**
   * <pre>
   * Текст, причина отклонения заявки, например order is not accepted in this trading session
   * </pre>
   *
   * <code>string failText = 10;</code>
   */
  com.google.protobuf.ByteString
      getFailTextBytes();

  /**
   * <pre>
   * Заявка на покупку или продажу buy/sell
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Side side = 11;</code>
   */
  int getSideValue();
  /**
   * <pre>
   * Заявка на покупку или продажу buy/sell
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Side side = 11;</code>
   */
  dominvest.backend.core.model.Side getSide();

  /**
   * <pre>
   * Размер лота
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal lotSize = 12;</code>
   */
  boolean hasLotSize();
  /**
   * <pre>
   * Размер лота
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal lotSize = 12;</code>
   */
  dominvest.backend.core.model.Decimal getLotSize();
  /**
   * <pre>
   * Размер лота
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal lotSize = 12;</code>
   */
  dominvest.backend.core.model.DecimalOrBuilder getLotSizeOrBuilder();

  /**
   * <pre>
   * Кол-во лотов
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal lotQty = 13;</code>
   */
  boolean hasLotQty();
  /**
   * <pre>
   * Кол-во лотов
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal lotQty = 13;</code>
   */
  dominvest.backend.core.model.Decimal getLotQty();
  /**
   * <pre>
   * Кол-во лотов
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal lotQty = 13;</code>
   */
  dominvest.backend.core.model.DecimalOrBuilder getLotQtyOrBuilder();

  /**
   * <pre>
   * Уже купленное/проданное кол-во лотов, если заявка исполняется частями
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal filledQty = 14;</code>
   */
  boolean hasFilledQty();
  /**
   * <pre>
   * Уже купленное/проданное кол-во лотов, если заявка исполняется частями
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal filledQty = 14;</code>
   */
  dominvest.backend.core.model.Decimal getFilledQty();
  /**
   * <pre>
   * Уже купленное/проданное кол-во лотов, если заявка исполняется частями
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal filledQty = 14;</code>
   */
  dominvest.backend.core.model.DecimalOrBuilder getFilledQtyOrBuilder();

  /**
   * <pre>
   * Цена за ед. Когда отправляется уже одобренная заявка в FixGate - указывается только для заявок с типами limit, gtd, limitLoss, limitProfit. Для рыночных заявок не указывается
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal price = 15;</code>
   */
  boolean hasPrice();
  /**
   * <pre>
   * Цена за ед. Когда отправляется уже одобренная заявка в FixGate - указывается только для заявок с типами limit, gtd, limitLoss, limitProfit. Для рыночных заявок не указывается
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal price = 15;</code>
   */
  dominvest.backend.core.model.Decimal getPrice();
  /**
   * <pre>
   * Цена за ед. Когда отправляется уже одобренная заявка в FixGate - указывается только для заявок с типами limit, gtd, limitLoss, limitProfit. Для рыночных заявок не указывается
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal price = 15;</code>
   */
  dominvest.backend.core.model.DecimalOrBuilder getPriceOrBuilder();

  /**
   * <pre>
   * Граничная цена (применяется для заявок limitLoss, limitProfit, marketLoss, marketProfit). Цена, при которой заявка будет выставлена на биржу. При этом заявки marketLoss, marketProfit будут выставлены по рыночной цене, а заявки limitLoss, limitProfit - по цене, указанной в заявке.
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal triggerPrice = 16;</code>
   */
  boolean hasTriggerPrice();
  /**
   * <pre>
   * Граничная цена (применяется для заявок limitLoss, limitProfit, marketLoss, marketProfit). Цена, при которой заявка будет выставлена на биржу. При этом заявки marketLoss, marketProfit будут выставлены по рыночной цене, а заявки limitLoss, limitProfit - по цене, указанной в заявке.
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal triggerPrice = 16;</code>
   */
  dominvest.backend.core.model.Decimal getTriggerPrice();
  /**
   * <pre>
   * Граничная цена (применяется для заявок limitLoss, limitProfit, marketLoss, marketProfit). Цена, при которой заявка будет выставлена на биржу. При этом заявки marketLoss, marketProfit будут выставлены по рыночной цене, а заявки limitLoss, limitProfit - по цене, указанной в заявке.
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal triggerPrice = 16;</code>
   */
  dominvest.backend.core.model.DecimalOrBuilder getTriggerPriceOrBuilder();

  /**
   * <pre>
   * Валюта, например, RUB
   * </pre>
   *
   * <code>string currency = 17;</code>
   */
  java.lang.String getCurrency();
  /**
   * <pre>
   * Валюта, например, RUB
   * </pre>
   *
   * <code>string currency = 17;</code>
   */
  com.google.protobuf.ByteString
      getCurrencyBytes();

  /**
   * <pre>
   * Биржа, например, MOEX
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Exchange exchange = 18;</code>
   */
  int getExchangeValue();
  /**
   * <pre>
   * Биржа, например, MOEX
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Exchange exchange = 18;</code>
   */
  dominvest.backend.core.model.Exchange getExchange();

  /**
   * <pre>
   * Борда биржи, например TQOB
   * </pre>
   *
   * <code>string board = 19;</code>
   */
  java.lang.String getBoard();
  /**
   * <pre>
   * Борда биржи, например TQOB
   * </pre>
   *
   * <code>string board = 19;</code>
   */
  com.google.protobuf.ByteString
      getBoardBytes();

  /**
   * <pre>
   * id заявки
   * </pre>
   *
   * <code>uint64 orderId = 20;</code>
   */
  long getOrderId();

  /**
   * <pre>
   * Только для заявок с типом GTD: дата до которой включительно нужно исполнить заявку. Если не исполнить - на отменяется
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Date gtdDate = 21;</code>
   */
  boolean hasGtdDate();
  /**
   * <pre>
   * Только для заявок с типом GTD: дата до которой включительно нужно исполнить заявку. Если не исполнить - на отменяется
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Date gtdDate = 21;</code>
   */
  dominvest.backend.core.model.Date getGtdDate();
  /**
   * <pre>
   * Только для заявок с типом GTD: дата до которой включительно нужно исполнить заявку. Если не исполнить - на отменяется
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Date gtdDate = 21;</code>
   */
  dominvest.backend.core.model.DateOrBuilder getGtdDateOrBuilder();

  /**
   * <pre>
   * Не заполняется
   * </pre>
   *
   * <code>uint32 portfolioId = 22;</code>
   */
  int getPortfolioId();

  /**
   * <pre>
   * Сквозной идентификатор запроса, по факту не заполняется
   * </pre>
   *
   * <code>string requestId = 23;</code>
   */
  java.lang.String getRequestId();
  /**
   * <pre>
   * Сквозной идентификатор запроса, по факту не заполняется
   * </pre>
   *
   * <code>string requestId = 23;</code>
   */
  com.google.protobuf.ByteString
      getRequestIdBytes();
}
