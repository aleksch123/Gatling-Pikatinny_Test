// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Order.proto

package dominvest.backend.core.model;

/**
 * Protobuf type {@code dominvest.backend.core.model.Order}
 */
public  final class Order extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:dominvest.backend.core.model.Order)
    OrderOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Order.newBuilder() to construct.
  private Order(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Order() {
    clientId_ = "";
    ticker_ = "";
    securityId_ = "";
    type_ = 0;
    action_ = 0;
    status_ = 0;
    failReason_ = 0;
    failText_ = "";
    side_ = 0;
    currency_ = "";
    exchange_ = 0;
    board_ = "";
    requestId_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Order();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Order(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            dominvest.backend.core.model.DateTime.Builder subBuilder = null;
            if (createDateTime_ != null) {
              subBuilder = createDateTime_.toBuilder();
            }
            createDateTime_ = input.readMessage(dominvest.backend.core.model.DateTime.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(createDateTime_);
              createDateTime_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            dominvest.backend.core.model.DateTime.Builder subBuilder = null;
            if (changeDateTime_ != null) {
              subBuilder = changeDateTime_.toBuilder();
            }
            changeDateTime_ = input.readMessage(dominvest.backend.core.model.DateTime.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(changeDateTime_);
              changeDateTime_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();

            clientId_ = s;
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();

            ticker_ = s;
            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();

            securityId_ = s;
            break;
          }
          case 48: {
            int rawValue = input.readEnum();

            type_ = rawValue;
            break;
          }
          case 56: {
            int rawValue = input.readEnum();

            action_ = rawValue;
            break;
          }
          case 64: {
            int rawValue = input.readEnum();

            status_ = rawValue;
            break;
          }
          case 72: {
            int rawValue = input.readEnum();

            failReason_ = rawValue;
            break;
          }
          case 82: {
            java.lang.String s = input.readStringRequireUtf8();

            failText_ = s;
            break;
          }
          case 88: {
            int rawValue = input.readEnum();

            side_ = rawValue;
            break;
          }
          case 98: {
            dominvest.backend.core.model.Decimal.Builder subBuilder = null;
            if (lotSize_ != null) {
              subBuilder = lotSize_.toBuilder();
            }
            lotSize_ = input.readMessage(dominvest.backend.core.model.Decimal.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(lotSize_);
              lotSize_ = subBuilder.buildPartial();
            }

            break;
          }
          case 106: {
            dominvest.backend.core.model.Decimal.Builder subBuilder = null;
            if (lotQty_ != null) {
              subBuilder = lotQty_.toBuilder();
            }
            lotQty_ = input.readMessage(dominvest.backend.core.model.Decimal.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(lotQty_);
              lotQty_ = subBuilder.buildPartial();
            }

            break;
          }
          case 114: {
            dominvest.backend.core.model.Decimal.Builder subBuilder = null;
            if (filledQty_ != null) {
              subBuilder = filledQty_.toBuilder();
            }
            filledQty_ = input.readMessage(dominvest.backend.core.model.Decimal.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(filledQty_);
              filledQty_ = subBuilder.buildPartial();
            }

            break;
          }
          case 122: {
            dominvest.backend.core.model.Decimal.Builder subBuilder = null;
            if (price_ != null) {
              subBuilder = price_.toBuilder();
            }
            price_ = input.readMessage(dominvest.backend.core.model.Decimal.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(price_);
              price_ = subBuilder.buildPartial();
            }

            break;
          }
          case 130: {
            dominvest.backend.core.model.Decimal.Builder subBuilder = null;
            if (triggerPrice_ != null) {
              subBuilder = triggerPrice_.toBuilder();
            }
            triggerPrice_ = input.readMessage(dominvest.backend.core.model.Decimal.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(triggerPrice_);
              triggerPrice_ = subBuilder.buildPartial();
            }

            break;
          }
          case 138: {
            java.lang.String s = input.readStringRequireUtf8();

            currency_ = s;
            break;
          }
          case 144: {
            int rawValue = input.readEnum();

            exchange_ = rawValue;
            break;
          }
          case 154: {
            java.lang.String s = input.readStringRequireUtf8();

            board_ = s;
            break;
          }
          case 160: {

            orderId_ = input.readUInt64();
            break;
          }
          case 170: {
            dominvest.backend.core.model.Date.Builder subBuilder = null;
            if (gtdDate_ != null) {
              subBuilder = gtdDate_.toBuilder();
            }
            gtdDate_ = input.readMessage(dominvest.backend.core.model.Date.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(gtdDate_);
              gtdDate_ = subBuilder.buildPartial();
            }

            break;
          }
          case 176: {

            portfolioId_ = input.readUInt32();
            break;
          }
          case 186: {
            java.lang.String s = input.readStringRequireUtf8();

            requestId_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return dominvest.backend.core.model.OrderOuterClass.internal_static_dominvest_backend_core_model_Order_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return dominvest.backend.core.model.OrderOuterClass.internal_static_dominvest_backend_core_model_Order_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            dominvest.backend.core.model.Order.class, dominvest.backend.core.model.Order.Builder.class);
  }

  public static final int CREATEDATETIME_FIELD_NUMBER = 1;
  private dominvest.backend.core.model.DateTime createDateTime_;
  /**
   * <pre>
   * Дата и время создания заявки. По факту сейчас передается дата и время создания записи в базе OMS.oms_order
   * </pre>
   *
   * <code>.dominvest.backend.core.model.DateTime createDateTime = 1;</code>
   */
  public boolean hasCreateDateTime() {
    return createDateTime_ != null;
  }
  /**
   * <pre>
   * Дата и время создания заявки. По факту сейчас передается дата и время создания записи в базе OMS.oms_order
   * </pre>
   *
   * <code>.dominvest.backend.core.model.DateTime createDateTime = 1;</code>
   */
  public dominvest.backend.core.model.DateTime getCreateDateTime() {
    return createDateTime_ == null ? dominvest.backend.core.model.DateTime.getDefaultInstance() : createDateTime_;
  }
  /**
   * <pre>
   * Дата и время создания заявки. По факту сейчас передается дата и время создания записи в базе OMS.oms_order
   * </pre>
   *
   * <code>.dominvest.backend.core.model.DateTime createDateTime = 1;</code>
   */
  public dominvest.backend.core.model.DateTimeOrBuilder getCreateDateTimeOrBuilder() {
    return getCreateDateTime();
  }

  public static final int CHANGEDATETIME_FIELD_NUMBER = 2;
  private dominvest.backend.core.model.DateTime changeDateTime_;
  /**
   * <pre>
   * Дата и время изменения заявки. Может заполняться так же createDateTime или не заполняться
   * </pre>
   *
   * <code>.dominvest.backend.core.model.DateTime changeDateTime = 2;</code>
   */
  public boolean hasChangeDateTime() {
    return changeDateTime_ != null;
  }
  /**
   * <pre>
   * Дата и время изменения заявки. Может заполняться так же createDateTime или не заполняться
   * </pre>
   *
   * <code>.dominvest.backend.core.model.DateTime changeDateTime = 2;</code>
   */
  public dominvest.backend.core.model.DateTime getChangeDateTime() {
    return changeDateTime_ == null ? dominvest.backend.core.model.DateTime.getDefaultInstance() : changeDateTime_;
  }
  /**
   * <pre>
   * Дата и время изменения заявки. Может заполняться так же createDateTime или не заполняться
   * </pre>
   *
   * <code>.dominvest.backend.core.model.DateTime changeDateTime = 2;</code>
   */
  public dominvest.backend.core.model.DateTimeOrBuilder getChangeDateTimeOrBuilder() {
    return getChangeDateTime();
  }

  public static final int CLIENTID_FIELD_NUMBER = 3;
  private volatile java.lang.Object clientId_;
  /**
   * <pre>
   * сквозной id клиента по всем БД ДОМ.Инвест
   * </pre>
   *
   * <code>string clientId = 3;</code>
   */
  public java.lang.String getClientId() {
    java.lang.Object ref = clientId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      clientId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * сквозной id клиента по всем БД ДОМ.Инвест
   * </pre>
   *
   * <code>string clientId = 3;</code>
   */
  public com.google.protobuf.ByteString
      getClientIdBytes() {
    java.lang.Object ref = clientId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      clientId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TICKER_FIELD_NUMBER = 4;
  private volatile java.lang.Object ticker_;
  /**
   * <pre>
   * Тикер
   * </pre>
   *
   * <code>string ticker = 4;</code>
   */
  public java.lang.String getTicker() {
    java.lang.Object ref = ticker_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      ticker_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Тикер
   * </pre>
   *
   * <code>string ticker = 4;</code>
   */
  public com.google.protobuf.ByteString
      getTickerBytes() {
    java.lang.Object ref = ticker_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      ticker_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SECURITYID_FIELD_NUMBER = 5;
  private volatile java.lang.Object securityId_;
  /**
   * <pre>
   * id инструмента. Обычно строка из 3-х частей через точку: id инструмента, id борды, id биржи. Для не биржевых инструментов без режима торгов. Для валют просто RUB, EUR, USD
   * </pre>
   *
   * <code>string securityId = 5;</code>
   */
  public java.lang.String getSecurityId() {
    java.lang.Object ref = securityId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      securityId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * id инструмента. Обычно строка из 3-х частей через точку: id инструмента, id борды, id биржи. Для не биржевых инструментов без режима торгов. Для валют просто RUB, EUR, USD
   * </pre>
   *
   * <code>string securityId = 5;</code>
   */
  public com.google.protobuf.ByteString
      getSecurityIdBytes() {
    java.lang.Object ref = securityId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      securityId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TYPE_FIELD_NUMBER = 6;
  private int type_;
  /**
   * <pre>
   * Тип заявки (по справочнику), строка
   * </pre>
   *
   * <code>.dominvest.backend.core.model.OrderType type = 6;</code>
   */
  public int getTypeValue() {
    return type_;
  }
  /**
   * <pre>
   * Тип заявки (по справочнику), строка
   * </pre>
   *
   * <code>.dominvest.backend.core.model.OrderType type = 6;</code>
   */
  public dominvest.backend.core.model.OrderType getType() {
    @SuppressWarnings("deprecation")
    dominvest.backend.core.model.OrderType result = dominvest.backend.core.model.OrderType.valueOf(type_);
    return result == null ? dominvest.backend.core.model.OrderType.UNRECOGNIZED : result;
  }

  public static final int ACTION_FIELD_NUMBER = 7;
  private int action_;
  /**
   * <pre>
   * При создании заявки ставится CREATE, при отмене заявки CANCEL
   * </pre>
   *
   * <code>.dominvest.backend.core.model.OrderAction action = 7;</code>
   */
  public int getActionValue() {
    return action_;
  }
  /**
   * <pre>
   * При создании заявки ставится CREATE, при отмене заявки CANCEL
   * </pre>
   *
   * <code>.dominvest.backend.core.model.OrderAction action = 7;</code>
   */
  public dominvest.backend.core.model.OrderAction getAction() {
    @SuppressWarnings("deprecation")
    dominvest.backend.core.model.OrderAction result = dominvest.backend.core.model.OrderAction.valueOf(action_);
    return result == null ? dominvest.backend.core.model.OrderAction.UNRECOGNIZED : result;
  }

  public static final int STATUS_FIELD_NUMBER = 8;
  private int status_;
  /**
   * <pre>
   * Статус заявки (по справочнику)
   * </pre>
   *
   * <code>.dominvest.backend.core.model.OrderStatus status = 8;</code>
   */
  public int getStatusValue() {
    return status_;
  }
  /**
   * <pre>
   * Статус заявки (по справочнику)
   * </pre>
   *
   * <code>.dominvest.backend.core.model.OrderStatus status = 8;</code>
   */
  public dominvest.backend.core.model.OrderStatus getStatus() {
    @SuppressWarnings("deprecation")
    dominvest.backend.core.model.OrderStatus result = dominvest.backend.core.model.OrderStatus.valueOf(status_);
    return result == null ? dominvest.backend.core.model.OrderStatus.UNRECOGNIZED : result;
  }

  public static final int FAILREASON_FIELD_NUMBER = 9;
  private int failReason_;
  /**
   * <pre>
   * Причина отклонения заявки (по справочнику)
   * </pre>
   *
   * <code>.dominvest.backend.core.model.OrderFailReason failReason = 9;</code>
   */
  public int getFailReasonValue() {
    return failReason_;
  }
  /**
   * <pre>
   * Причина отклонения заявки (по справочнику)
   * </pre>
   *
   * <code>.dominvest.backend.core.model.OrderFailReason failReason = 9;</code>
   */
  public dominvest.backend.core.model.OrderFailReason getFailReason() {
    @SuppressWarnings("deprecation")
    dominvest.backend.core.model.OrderFailReason result = dominvest.backend.core.model.OrderFailReason.valueOf(failReason_);
    return result == null ? dominvest.backend.core.model.OrderFailReason.UNRECOGNIZED : result;
  }

  public static final int FAILTEXT_FIELD_NUMBER = 10;
  private volatile java.lang.Object failText_;
  /**
   * <pre>
   * Текст, причина отклонения заявки, например order is not accepted in this trading session
   * </pre>
   *
   * <code>string failText = 10;</code>
   */
  public java.lang.String getFailText() {
    java.lang.Object ref = failText_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      failText_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Текст, причина отклонения заявки, например order is not accepted in this trading session
   * </pre>
   *
   * <code>string failText = 10;</code>
   */
  public com.google.protobuf.ByteString
      getFailTextBytes() {
    java.lang.Object ref = failText_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      failText_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SIDE_FIELD_NUMBER = 11;
  private int side_;
  /**
   * <pre>
   * Заявка на покупку или продажу buy/sell
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Side side = 11;</code>
   */
  public int getSideValue() {
    return side_;
  }
  /**
   * <pre>
   * Заявка на покупку или продажу buy/sell
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Side side = 11;</code>
   */
  public dominvest.backend.core.model.Side getSide() {
    @SuppressWarnings("deprecation")
    dominvest.backend.core.model.Side result = dominvest.backend.core.model.Side.valueOf(side_);
    return result == null ? dominvest.backend.core.model.Side.UNRECOGNIZED : result;
  }

  public static final int LOTSIZE_FIELD_NUMBER = 12;
  private dominvest.backend.core.model.Decimal lotSize_;
  /**
   * <pre>
   * Размер лота
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal lotSize = 12;</code>
   */
  public boolean hasLotSize() {
    return lotSize_ != null;
  }
  /**
   * <pre>
   * Размер лота
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal lotSize = 12;</code>
   */
  public dominvest.backend.core.model.Decimal getLotSize() {
    return lotSize_ == null ? dominvest.backend.core.model.Decimal.getDefaultInstance() : lotSize_;
  }
  /**
   * <pre>
   * Размер лота
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal lotSize = 12;</code>
   */
  public dominvest.backend.core.model.DecimalOrBuilder getLotSizeOrBuilder() {
    return getLotSize();
  }

  public static final int LOTQTY_FIELD_NUMBER = 13;
  private dominvest.backend.core.model.Decimal lotQty_;
  /**
   * <pre>
   * Кол-во лотов
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal lotQty = 13;</code>
   */
  public boolean hasLotQty() {
    return lotQty_ != null;
  }
  /**
   * <pre>
   * Кол-во лотов
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal lotQty = 13;</code>
   */
  public dominvest.backend.core.model.Decimal getLotQty() {
    return lotQty_ == null ? dominvest.backend.core.model.Decimal.getDefaultInstance() : lotQty_;
  }
  /**
   * <pre>
   * Кол-во лотов
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal lotQty = 13;</code>
   */
  public dominvest.backend.core.model.DecimalOrBuilder getLotQtyOrBuilder() {
    return getLotQty();
  }

  public static final int FILLEDQTY_FIELD_NUMBER = 14;
  private dominvest.backend.core.model.Decimal filledQty_;
  /**
   * <pre>
   * Уже купленное/проданное кол-во лотов, если заявка исполняется частями
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal filledQty = 14;</code>
   */
  public boolean hasFilledQty() {
    return filledQty_ != null;
  }
  /**
   * <pre>
   * Уже купленное/проданное кол-во лотов, если заявка исполняется частями
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal filledQty = 14;</code>
   */
  public dominvest.backend.core.model.Decimal getFilledQty() {
    return filledQty_ == null ? dominvest.backend.core.model.Decimal.getDefaultInstance() : filledQty_;
  }
  /**
   * <pre>
   * Уже купленное/проданное кол-во лотов, если заявка исполняется частями
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal filledQty = 14;</code>
   */
  public dominvest.backend.core.model.DecimalOrBuilder getFilledQtyOrBuilder() {
    return getFilledQty();
  }

  public static final int PRICE_FIELD_NUMBER = 15;
  private dominvest.backend.core.model.Decimal price_;
  /**
   * <pre>
   * Цена за ед. Когда отправляется уже одобренная заявка в FixGate - указывается только для заявок с типами limit, gtd, limitLoss, limitProfit. Для рыночных заявок не указывается
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal price = 15;</code>
   */
  public boolean hasPrice() {
    return price_ != null;
  }
  /**
   * <pre>
   * Цена за ед. Когда отправляется уже одобренная заявка в FixGate - указывается только для заявок с типами limit, gtd, limitLoss, limitProfit. Для рыночных заявок не указывается
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal price = 15;</code>
   */
  public dominvest.backend.core.model.Decimal getPrice() {
    return price_ == null ? dominvest.backend.core.model.Decimal.getDefaultInstance() : price_;
  }
  /**
   * <pre>
   * Цена за ед. Когда отправляется уже одобренная заявка в FixGate - указывается только для заявок с типами limit, gtd, limitLoss, limitProfit. Для рыночных заявок не указывается
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal price = 15;</code>
   */
  public dominvest.backend.core.model.DecimalOrBuilder getPriceOrBuilder() {
    return getPrice();
  }

  public static final int TRIGGERPRICE_FIELD_NUMBER = 16;
  private dominvest.backend.core.model.Decimal triggerPrice_;
  /**
   * <pre>
   * Граничная цена (применяется для заявок limitLoss, limitProfit, marketLoss, marketProfit). Цена, при которой заявка будет выставлена на биржу. При этом заявки marketLoss, marketProfit будут выставлены по рыночной цене, а заявки limitLoss, limitProfit - по цене, указанной в заявке.
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal triggerPrice = 16;</code>
   */
  public boolean hasTriggerPrice() {
    return triggerPrice_ != null;
  }
  /**
   * <pre>
   * Граничная цена (применяется для заявок limitLoss, limitProfit, marketLoss, marketProfit). Цена, при которой заявка будет выставлена на биржу. При этом заявки marketLoss, marketProfit будут выставлены по рыночной цене, а заявки limitLoss, limitProfit - по цене, указанной в заявке.
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal triggerPrice = 16;</code>
   */
  public dominvest.backend.core.model.Decimal getTriggerPrice() {
    return triggerPrice_ == null ? dominvest.backend.core.model.Decimal.getDefaultInstance() : triggerPrice_;
  }
  /**
   * <pre>
   * Граничная цена (применяется для заявок limitLoss, limitProfit, marketLoss, marketProfit). Цена, при которой заявка будет выставлена на биржу. При этом заявки marketLoss, marketProfit будут выставлены по рыночной цене, а заявки limitLoss, limitProfit - по цене, указанной в заявке.
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Decimal triggerPrice = 16;</code>
   */
  public dominvest.backend.core.model.DecimalOrBuilder getTriggerPriceOrBuilder() {
    return getTriggerPrice();
  }

  public static final int CURRENCY_FIELD_NUMBER = 17;
  private volatile java.lang.Object currency_;
  /**
   * <pre>
   * Валюта, например, RUB
   * </pre>
   *
   * <code>string currency = 17;</code>
   */
  public java.lang.String getCurrency() {
    java.lang.Object ref = currency_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      currency_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Валюта, например, RUB
   * </pre>
   *
   * <code>string currency = 17;</code>
   */
  public com.google.protobuf.ByteString
      getCurrencyBytes() {
    java.lang.Object ref = currency_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      currency_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int EXCHANGE_FIELD_NUMBER = 18;
  private int exchange_;
  /**
   * <pre>
   * Биржа, например, MOEX
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Exchange exchange = 18;</code>
   */
  public int getExchangeValue() {
    return exchange_;
  }
  /**
   * <pre>
   * Биржа, например, MOEX
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Exchange exchange = 18;</code>
   */
  public dominvest.backend.core.model.Exchange getExchange() {
    @SuppressWarnings("deprecation")
    dominvest.backend.core.model.Exchange result = dominvest.backend.core.model.Exchange.valueOf(exchange_);
    return result == null ? dominvest.backend.core.model.Exchange.UNRECOGNIZED : result;
  }

  public static final int BOARD_FIELD_NUMBER = 19;
  private volatile java.lang.Object board_;
  /**
   * <pre>
   * Борда биржи, например TQOB
   * </pre>
   *
   * <code>string board = 19;</code>
   */
  public java.lang.String getBoard() {
    java.lang.Object ref = board_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      board_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Борда биржи, например TQOB
   * </pre>
   *
   * <code>string board = 19;</code>
   */
  public com.google.protobuf.ByteString
      getBoardBytes() {
    java.lang.Object ref = board_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      board_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ORDERID_FIELD_NUMBER = 20;
  private long orderId_;
  /**
   * <pre>
   * id заявки
   * </pre>
   *
   * <code>uint64 orderId = 20;</code>
   */
  public long getOrderId() {
    return orderId_;
  }

  public static final int GTDDATE_FIELD_NUMBER = 21;
  private dominvest.backend.core.model.Date gtdDate_;
  /**
   * <pre>
   * Только для заявок с типом GTD: дата до которой включительно нужно исполнить заявку. Если не исполнить - на отменяется
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Date gtdDate = 21;</code>
   */
  public boolean hasGtdDate() {
    return gtdDate_ != null;
  }
  /**
   * <pre>
   * Только для заявок с типом GTD: дата до которой включительно нужно исполнить заявку. Если не исполнить - на отменяется
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Date gtdDate = 21;</code>
   */
  public dominvest.backend.core.model.Date getGtdDate() {
    return gtdDate_ == null ? dominvest.backend.core.model.Date.getDefaultInstance() : gtdDate_;
  }
  /**
   * <pre>
   * Только для заявок с типом GTD: дата до которой включительно нужно исполнить заявку. Если не исполнить - на отменяется
   * </pre>
   *
   * <code>.dominvest.backend.core.model.Date gtdDate = 21;</code>
   */
  public dominvest.backend.core.model.DateOrBuilder getGtdDateOrBuilder() {
    return getGtdDate();
  }

  public static final int PORTFOLIOID_FIELD_NUMBER = 22;
  private int portfolioId_;
  /**
   * <pre>
   * Не заполняется
   * </pre>
   *
   * <code>uint32 portfolioId = 22;</code>
   */
  public int getPortfolioId() {
    return portfolioId_;
  }

  public static final int REQUESTID_FIELD_NUMBER = 23;
  private volatile java.lang.Object requestId_;
  /**
   * <pre>
   * Сквозной идентификатор запроса, по факту не заполняется
   * </pre>
   *
   * <code>string requestId = 23;</code>
   */
  public java.lang.String getRequestId() {
    java.lang.Object ref = requestId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      requestId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Сквозной идентификатор запроса, по факту не заполняется
   * </pre>
   *
   * <code>string requestId = 23;</code>
   */
  public com.google.protobuf.ByteString
      getRequestIdBytes() {
    java.lang.Object ref = requestId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      requestId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (createDateTime_ != null) {
      output.writeMessage(1, getCreateDateTime());
    }
    if (changeDateTime_ != null) {
      output.writeMessage(2, getChangeDateTime());
    }
    if (!getClientIdBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, clientId_);
    }
    if (!getTickerBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, ticker_);
    }
    if (!getSecurityIdBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, securityId_);
    }
    if (type_ != dominvest.backend.core.model.OrderType.NO_TYPE.getNumber()) {
      output.writeEnum(6, type_);
    }
    if (action_ != dominvest.backend.core.model.OrderAction.NO_ACTION.getNumber()) {
      output.writeEnum(7, action_);
    }
    if (status_ != dominvest.backend.core.model.OrderStatus.NO_STATUS.getNumber()) {
      output.writeEnum(8, status_);
    }
    if (failReason_ != dominvest.backend.core.model.OrderFailReason.NO_FAIL.getNumber()) {
      output.writeEnum(9, failReason_);
    }
    if (!getFailTextBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 10, failText_);
    }
    if (side_ != dominvest.backend.core.model.Side.NULL.getNumber()) {
      output.writeEnum(11, side_);
    }
    if (lotSize_ != null) {
      output.writeMessage(12, getLotSize());
    }
    if (lotQty_ != null) {
      output.writeMessage(13, getLotQty());
    }
    if (filledQty_ != null) {
      output.writeMessage(14, getFilledQty());
    }
    if (price_ != null) {
      output.writeMessage(15, getPrice());
    }
    if (triggerPrice_ != null) {
      output.writeMessage(16, getTriggerPrice());
    }
    if (!getCurrencyBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 17, currency_);
    }
    if (exchange_ != dominvest.backend.core.model.Exchange.NO_EXCH.getNumber()) {
      output.writeEnum(18, exchange_);
    }
    if (!getBoardBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 19, board_);
    }
    if (orderId_ != 0L) {
      output.writeUInt64(20, orderId_);
    }
    if (gtdDate_ != null) {
      output.writeMessage(21, getGtdDate());
    }
    if (portfolioId_ != 0) {
      output.writeUInt32(22, portfolioId_);
    }
    if (!getRequestIdBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 23, requestId_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (createDateTime_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getCreateDateTime());
    }
    if (changeDateTime_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getChangeDateTime());
    }
    if (!getClientIdBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, clientId_);
    }
    if (!getTickerBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, ticker_);
    }
    if (!getSecurityIdBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, securityId_);
    }
    if (type_ != dominvest.backend.core.model.OrderType.NO_TYPE.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(6, type_);
    }
    if (action_ != dominvest.backend.core.model.OrderAction.NO_ACTION.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(7, action_);
    }
    if (status_ != dominvest.backend.core.model.OrderStatus.NO_STATUS.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(8, status_);
    }
    if (failReason_ != dominvest.backend.core.model.OrderFailReason.NO_FAIL.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(9, failReason_);
    }
    if (!getFailTextBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(10, failText_);
    }
    if (side_ != dominvest.backend.core.model.Side.NULL.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(11, side_);
    }
    if (lotSize_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, getLotSize());
    }
    if (lotQty_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, getLotQty());
    }
    if (filledQty_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, getFilledQty());
    }
    if (price_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(15, getPrice());
    }
    if (triggerPrice_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(16, getTriggerPrice());
    }
    if (!getCurrencyBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(17, currency_);
    }
    if (exchange_ != dominvest.backend.core.model.Exchange.NO_EXCH.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(18, exchange_);
    }
    if (!getBoardBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(19, board_);
    }
    if (orderId_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(20, orderId_);
    }
    if (gtdDate_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(21, getGtdDate());
    }
    if (portfolioId_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(22, portfolioId_);
    }
    if (!getRequestIdBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(23, requestId_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof dominvest.backend.core.model.Order)) {
      return super.equals(obj);
    }
    dominvest.backend.core.model.Order other = (dominvest.backend.core.model.Order) obj;

    if (hasCreateDateTime() != other.hasCreateDateTime()) return false;
    if (hasCreateDateTime()) {
      if (!getCreateDateTime()
          .equals(other.getCreateDateTime())) return false;
    }
    if (hasChangeDateTime() != other.hasChangeDateTime()) return false;
    if (hasChangeDateTime()) {
      if (!getChangeDateTime()
          .equals(other.getChangeDateTime())) return false;
    }
    if (!getClientId()
        .equals(other.getClientId())) return false;
    if (!getTicker()
        .equals(other.getTicker())) return false;
    if (!getSecurityId()
        .equals(other.getSecurityId())) return false;
    if (type_ != other.type_) return false;
    if (action_ != other.action_) return false;
    if (status_ != other.status_) return false;
    if (failReason_ != other.failReason_) return false;
    if (!getFailText()
        .equals(other.getFailText())) return false;
    if (side_ != other.side_) return false;
    if (hasLotSize() != other.hasLotSize()) return false;
    if (hasLotSize()) {
      if (!getLotSize()
          .equals(other.getLotSize())) return false;
    }
    if (hasLotQty() != other.hasLotQty()) return false;
    if (hasLotQty()) {
      if (!getLotQty()
          .equals(other.getLotQty())) return false;
    }
    if (hasFilledQty() != other.hasFilledQty()) return false;
    if (hasFilledQty()) {
      if (!getFilledQty()
          .equals(other.getFilledQty())) return false;
    }
    if (hasPrice() != other.hasPrice()) return false;
    if (hasPrice()) {
      if (!getPrice()
          .equals(other.getPrice())) return false;
    }
    if (hasTriggerPrice() != other.hasTriggerPrice()) return false;
    if (hasTriggerPrice()) {
      if (!getTriggerPrice()
          .equals(other.getTriggerPrice())) return false;
    }
    if (!getCurrency()
        .equals(other.getCurrency())) return false;
    if (exchange_ != other.exchange_) return false;
    if (!getBoard()
        .equals(other.getBoard())) return false;
    if (getOrderId()
        != other.getOrderId()) return false;
    if (hasGtdDate() != other.hasGtdDate()) return false;
    if (hasGtdDate()) {
      if (!getGtdDate()
          .equals(other.getGtdDate())) return false;
    }
    if (getPortfolioId()
        != other.getPortfolioId()) return false;
    if (!getRequestId()
        .equals(other.getRequestId())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasCreateDateTime()) {
      hash = (37 * hash) + CREATEDATETIME_FIELD_NUMBER;
      hash = (53 * hash) + getCreateDateTime().hashCode();
    }
    if (hasChangeDateTime()) {
      hash = (37 * hash) + CHANGEDATETIME_FIELD_NUMBER;
      hash = (53 * hash) + getChangeDateTime().hashCode();
    }
    hash = (37 * hash) + CLIENTID_FIELD_NUMBER;
    hash = (53 * hash) + getClientId().hashCode();
    hash = (37 * hash) + TICKER_FIELD_NUMBER;
    hash = (53 * hash) + getTicker().hashCode();
    hash = (37 * hash) + SECURITYID_FIELD_NUMBER;
    hash = (53 * hash) + getSecurityId().hashCode();
    hash = (37 * hash) + TYPE_FIELD_NUMBER;
    hash = (53 * hash) + type_;
    hash = (37 * hash) + ACTION_FIELD_NUMBER;
    hash = (53 * hash) + action_;
    hash = (37 * hash) + STATUS_FIELD_NUMBER;
    hash = (53 * hash) + status_;
    hash = (37 * hash) + FAILREASON_FIELD_NUMBER;
    hash = (53 * hash) + failReason_;
    hash = (37 * hash) + FAILTEXT_FIELD_NUMBER;
    hash = (53 * hash) + getFailText().hashCode();
    hash = (37 * hash) + SIDE_FIELD_NUMBER;
    hash = (53 * hash) + side_;
    if (hasLotSize()) {
      hash = (37 * hash) + LOTSIZE_FIELD_NUMBER;
      hash = (53 * hash) + getLotSize().hashCode();
    }
    if (hasLotQty()) {
      hash = (37 * hash) + LOTQTY_FIELD_NUMBER;
      hash = (53 * hash) + getLotQty().hashCode();
    }
    if (hasFilledQty()) {
      hash = (37 * hash) + FILLEDQTY_FIELD_NUMBER;
      hash = (53 * hash) + getFilledQty().hashCode();
    }
    if (hasPrice()) {
      hash = (37 * hash) + PRICE_FIELD_NUMBER;
      hash = (53 * hash) + getPrice().hashCode();
    }
    if (hasTriggerPrice()) {
      hash = (37 * hash) + TRIGGERPRICE_FIELD_NUMBER;
      hash = (53 * hash) + getTriggerPrice().hashCode();
    }
    hash = (37 * hash) + CURRENCY_FIELD_NUMBER;
    hash = (53 * hash) + getCurrency().hashCode();
    hash = (37 * hash) + EXCHANGE_FIELD_NUMBER;
    hash = (53 * hash) + exchange_;
    hash = (37 * hash) + BOARD_FIELD_NUMBER;
    hash = (53 * hash) + getBoard().hashCode();
    hash = (37 * hash) + ORDERID_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getOrderId());
    if (hasGtdDate()) {
      hash = (37 * hash) + GTDDATE_FIELD_NUMBER;
      hash = (53 * hash) + getGtdDate().hashCode();
    }
    hash = (37 * hash) + PORTFOLIOID_FIELD_NUMBER;
    hash = (53 * hash) + getPortfolioId();
    hash = (37 * hash) + REQUESTID_FIELD_NUMBER;
    hash = (53 * hash) + getRequestId().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static dominvest.backend.core.model.Order parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static dominvest.backend.core.model.Order parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static dominvest.backend.core.model.Order parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static dominvest.backend.core.model.Order parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static dominvest.backend.core.model.Order parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static dominvest.backend.core.model.Order parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static dominvest.backend.core.model.Order parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static dominvest.backend.core.model.Order parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static dominvest.backend.core.model.Order parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static dominvest.backend.core.model.Order parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static dominvest.backend.core.model.Order parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static dominvest.backend.core.model.Order parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(dominvest.backend.core.model.Order prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code dominvest.backend.core.model.Order}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:dominvest.backend.core.model.Order)
      dominvest.backend.core.model.OrderOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dominvest.backend.core.model.OrderOuterClass.internal_static_dominvest_backend_core_model_Order_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dominvest.backend.core.model.OrderOuterClass.internal_static_dominvest_backend_core_model_Order_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dominvest.backend.core.model.Order.class, dominvest.backend.core.model.Order.Builder.class);
    }

    // Construct using dominvest.backend.core.model.Order.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (createDateTimeBuilder_ == null) {
        createDateTime_ = null;
      } else {
        createDateTime_ = null;
        createDateTimeBuilder_ = null;
      }
      if (changeDateTimeBuilder_ == null) {
        changeDateTime_ = null;
      } else {
        changeDateTime_ = null;
        changeDateTimeBuilder_ = null;
      }
      clientId_ = "";

      ticker_ = "";

      securityId_ = "";

      type_ = 0;

      action_ = 0;

      status_ = 0;

      failReason_ = 0;

      failText_ = "";

      side_ = 0;

      if (lotSizeBuilder_ == null) {
        lotSize_ = null;
      } else {
        lotSize_ = null;
        lotSizeBuilder_ = null;
      }
      if (lotQtyBuilder_ == null) {
        lotQty_ = null;
      } else {
        lotQty_ = null;
        lotQtyBuilder_ = null;
      }
      if (filledQtyBuilder_ == null) {
        filledQty_ = null;
      } else {
        filledQty_ = null;
        filledQtyBuilder_ = null;
      }
      if (priceBuilder_ == null) {
        price_ = null;
      } else {
        price_ = null;
        priceBuilder_ = null;
      }
      if (triggerPriceBuilder_ == null) {
        triggerPrice_ = null;
      } else {
        triggerPrice_ = null;
        triggerPriceBuilder_ = null;
      }
      currency_ = "";

      exchange_ = 0;

      board_ = "";

      orderId_ = 0L;

      if (gtdDateBuilder_ == null) {
        gtdDate_ = null;
      } else {
        gtdDate_ = null;
        gtdDateBuilder_ = null;
      }
      portfolioId_ = 0;

      requestId_ = "";

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return dominvest.backend.core.model.OrderOuterClass.internal_static_dominvest_backend_core_model_Order_descriptor;
    }

    @java.lang.Override
    public dominvest.backend.core.model.Order getDefaultInstanceForType() {
      return dominvest.backend.core.model.Order.getDefaultInstance();
    }

    @java.lang.Override
    public dominvest.backend.core.model.Order build() {
      dominvest.backend.core.model.Order result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public dominvest.backend.core.model.Order buildPartial() {
      dominvest.backend.core.model.Order result = new dominvest.backend.core.model.Order(this);
      if (createDateTimeBuilder_ == null) {
        result.createDateTime_ = createDateTime_;
      } else {
        result.createDateTime_ = createDateTimeBuilder_.build();
      }
      if (changeDateTimeBuilder_ == null) {
        result.changeDateTime_ = changeDateTime_;
      } else {
        result.changeDateTime_ = changeDateTimeBuilder_.build();
      }
      result.clientId_ = clientId_;
      result.ticker_ = ticker_;
      result.securityId_ = securityId_;
      result.type_ = type_;
      result.action_ = action_;
      result.status_ = status_;
      result.failReason_ = failReason_;
      result.failText_ = failText_;
      result.side_ = side_;
      if (lotSizeBuilder_ == null) {
        result.lotSize_ = lotSize_;
      } else {
        result.lotSize_ = lotSizeBuilder_.build();
      }
      if (lotQtyBuilder_ == null) {
        result.lotQty_ = lotQty_;
      } else {
        result.lotQty_ = lotQtyBuilder_.build();
      }
      if (filledQtyBuilder_ == null) {
        result.filledQty_ = filledQty_;
      } else {
        result.filledQty_ = filledQtyBuilder_.build();
      }
      if (priceBuilder_ == null) {
        result.price_ = price_;
      } else {
        result.price_ = priceBuilder_.build();
      }
      if (triggerPriceBuilder_ == null) {
        result.triggerPrice_ = triggerPrice_;
      } else {
        result.triggerPrice_ = triggerPriceBuilder_.build();
      }
      result.currency_ = currency_;
      result.exchange_ = exchange_;
      result.board_ = board_;
      result.orderId_ = orderId_;
      if (gtdDateBuilder_ == null) {
        result.gtdDate_ = gtdDate_;
      } else {
        result.gtdDate_ = gtdDateBuilder_.build();
      }
      result.portfolioId_ = portfolioId_;
      result.requestId_ = requestId_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof dominvest.backend.core.model.Order) {
        return mergeFrom((dominvest.backend.core.model.Order)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(dominvest.backend.core.model.Order other) {
      if (other == dominvest.backend.core.model.Order.getDefaultInstance()) return this;
      if (other.hasCreateDateTime()) {
        mergeCreateDateTime(other.getCreateDateTime());
      }
      if (other.hasChangeDateTime()) {
        mergeChangeDateTime(other.getChangeDateTime());
      }
      if (!other.getClientId().isEmpty()) {
        clientId_ = other.clientId_;
        onChanged();
      }
      if (!other.getTicker().isEmpty()) {
        ticker_ = other.ticker_;
        onChanged();
      }
      if (!other.getSecurityId().isEmpty()) {
        securityId_ = other.securityId_;
        onChanged();
      }
      if (other.type_ != 0) {
        setTypeValue(other.getTypeValue());
      }
      if (other.action_ != 0) {
        setActionValue(other.getActionValue());
      }
      if (other.status_ != 0) {
        setStatusValue(other.getStatusValue());
      }
      if (other.failReason_ != 0) {
        setFailReasonValue(other.getFailReasonValue());
      }
      if (!other.getFailText().isEmpty()) {
        failText_ = other.failText_;
        onChanged();
      }
      if (other.side_ != 0) {
        setSideValue(other.getSideValue());
      }
      if (other.hasLotSize()) {
        mergeLotSize(other.getLotSize());
      }
      if (other.hasLotQty()) {
        mergeLotQty(other.getLotQty());
      }
      if (other.hasFilledQty()) {
        mergeFilledQty(other.getFilledQty());
      }
      if (other.hasPrice()) {
        mergePrice(other.getPrice());
      }
      if (other.hasTriggerPrice()) {
        mergeTriggerPrice(other.getTriggerPrice());
      }
      if (!other.getCurrency().isEmpty()) {
        currency_ = other.currency_;
        onChanged();
      }
      if (other.exchange_ != 0) {
        setExchangeValue(other.getExchangeValue());
      }
      if (!other.getBoard().isEmpty()) {
        board_ = other.board_;
        onChanged();
      }
      if (other.getOrderId() != 0L) {
        setOrderId(other.getOrderId());
      }
      if (other.hasGtdDate()) {
        mergeGtdDate(other.getGtdDate());
      }
      if (other.getPortfolioId() != 0) {
        setPortfolioId(other.getPortfolioId());
      }
      if (!other.getRequestId().isEmpty()) {
        requestId_ = other.requestId_;
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      dominvest.backend.core.model.Order parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (dominvest.backend.core.model.Order) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private dominvest.backend.core.model.DateTime createDateTime_;
    private com.google.protobuf.SingleFieldBuilderV3<
        dominvest.backend.core.model.DateTime, dominvest.backend.core.model.DateTime.Builder, dominvest.backend.core.model.DateTimeOrBuilder> createDateTimeBuilder_;
    /**
     * <pre>
     * Дата и время создания заявки. По факту сейчас передается дата и время создания записи в базе OMS.oms_order
     * </pre>
     *
     * <code>.dominvest.backend.core.model.DateTime createDateTime = 1;</code>
     */
    public boolean hasCreateDateTime() {
      return createDateTimeBuilder_ != null || createDateTime_ != null;
    }
    /**
     * <pre>
     * Дата и время создания заявки. По факту сейчас передается дата и время создания записи в базе OMS.oms_order
     * </pre>
     *
     * <code>.dominvest.backend.core.model.DateTime createDateTime = 1;</code>
     */
    public dominvest.backend.core.model.DateTime getCreateDateTime() {
      if (createDateTimeBuilder_ == null) {
        return createDateTime_ == null ? dominvest.backend.core.model.DateTime.getDefaultInstance() : createDateTime_;
      } else {
        return createDateTimeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Дата и время создания заявки. По факту сейчас передается дата и время создания записи в базе OMS.oms_order
     * </pre>
     *
     * <code>.dominvest.backend.core.model.DateTime createDateTime = 1;</code>
     */
    public Builder setCreateDateTime(dominvest.backend.core.model.DateTime value) {
      if (createDateTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        createDateTime_ = value;
        onChanged();
      } else {
        createDateTimeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Дата и время создания заявки. По факту сейчас передается дата и время создания записи в базе OMS.oms_order
     * </pre>
     *
     * <code>.dominvest.backend.core.model.DateTime createDateTime = 1;</code>
     */
    public Builder setCreateDateTime(
        dominvest.backend.core.model.DateTime.Builder builderForValue) {
      if (createDateTimeBuilder_ == null) {
        createDateTime_ = builderForValue.build();
        onChanged();
      } else {
        createDateTimeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Дата и время создания заявки. По факту сейчас передается дата и время создания записи в базе OMS.oms_order
     * </pre>
     *
     * <code>.dominvest.backend.core.model.DateTime createDateTime = 1;</code>
     */
    public Builder mergeCreateDateTime(dominvest.backend.core.model.DateTime value) {
      if (createDateTimeBuilder_ == null) {
        if (createDateTime_ != null) {
          createDateTime_ =
            dominvest.backend.core.model.DateTime.newBuilder(createDateTime_).mergeFrom(value).buildPartial();
        } else {
          createDateTime_ = value;
        }
        onChanged();
      } else {
        createDateTimeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Дата и время создания заявки. По факту сейчас передается дата и время создания записи в базе OMS.oms_order
     * </pre>
     *
     * <code>.dominvest.backend.core.model.DateTime createDateTime = 1;</code>
     */
    public Builder clearCreateDateTime() {
      if (createDateTimeBuilder_ == null) {
        createDateTime_ = null;
        onChanged();
      } else {
        createDateTime_ = null;
        createDateTimeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Дата и время создания заявки. По факту сейчас передается дата и время создания записи в базе OMS.oms_order
     * </pre>
     *
     * <code>.dominvest.backend.core.model.DateTime createDateTime = 1;</code>
     */
    public dominvest.backend.core.model.DateTime.Builder getCreateDateTimeBuilder() {
      
      onChanged();
      return getCreateDateTimeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Дата и время создания заявки. По факту сейчас передается дата и время создания записи в базе OMS.oms_order
     * </pre>
     *
     * <code>.dominvest.backend.core.model.DateTime createDateTime = 1;</code>
     */
    public dominvest.backend.core.model.DateTimeOrBuilder getCreateDateTimeOrBuilder() {
      if (createDateTimeBuilder_ != null) {
        return createDateTimeBuilder_.getMessageOrBuilder();
      } else {
        return createDateTime_ == null ?
            dominvest.backend.core.model.DateTime.getDefaultInstance() : createDateTime_;
      }
    }
    /**
     * <pre>
     * Дата и время создания заявки. По факту сейчас передается дата и время создания записи в базе OMS.oms_order
     * </pre>
     *
     * <code>.dominvest.backend.core.model.DateTime createDateTime = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        dominvest.backend.core.model.DateTime, dominvest.backend.core.model.DateTime.Builder, dominvest.backend.core.model.DateTimeOrBuilder> 
        getCreateDateTimeFieldBuilder() {
      if (createDateTimeBuilder_ == null) {
        createDateTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            dominvest.backend.core.model.DateTime, dominvest.backend.core.model.DateTime.Builder, dominvest.backend.core.model.DateTimeOrBuilder>(
                getCreateDateTime(),
                getParentForChildren(),
                isClean());
        createDateTime_ = null;
      }
      return createDateTimeBuilder_;
    }

    private dominvest.backend.core.model.DateTime changeDateTime_;
    private com.google.protobuf.SingleFieldBuilderV3<
        dominvest.backend.core.model.DateTime, dominvest.backend.core.model.DateTime.Builder, dominvest.backend.core.model.DateTimeOrBuilder> changeDateTimeBuilder_;
    /**
     * <pre>
     * Дата и время изменения заявки. Может заполняться так же createDateTime или не заполняться
     * </pre>
     *
     * <code>.dominvest.backend.core.model.DateTime changeDateTime = 2;</code>
     */
    public boolean hasChangeDateTime() {
      return changeDateTimeBuilder_ != null || changeDateTime_ != null;
    }
    /**
     * <pre>
     * Дата и время изменения заявки. Может заполняться так же createDateTime или не заполняться
     * </pre>
     *
     * <code>.dominvest.backend.core.model.DateTime changeDateTime = 2;</code>
     */
    public dominvest.backend.core.model.DateTime getChangeDateTime() {
      if (changeDateTimeBuilder_ == null) {
        return changeDateTime_ == null ? dominvest.backend.core.model.DateTime.getDefaultInstance() : changeDateTime_;
      } else {
        return changeDateTimeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Дата и время изменения заявки. Может заполняться так же createDateTime или не заполняться
     * </pre>
     *
     * <code>.dominvest.backend.core.model.DateTime changeDateTime = 2;</code>
     */
    public Builder setChangeDateTime(dominvest.backend.core.model.DateTime value) {
      if (changeDateTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        changeDateTime_ = value;
        onChanged();
      } else {
        changeDateTimeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Дата и время изменения заявки. Может заполняться так же createDateTime или не заполняться
     * </pre>
     *
     * <code>.dominvest.backend.core.model.DateTime changeDateTime = 2;</code>
     */
    public Builder setChangeDateTime(
        dominvest.backend.core.model.DateTime.Builder builderForValue) {
      if (changeDateTimeBuilder_ == null) {
        changeDateTime_ = builderForValue.build();
        onChanged();
      } else {
        changeDateTimeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Дата и время изменения заявки. Может заполняться так же createDateTime или не заполняться
     * </pre>
     *
     * <code>.dominvest.backend.core.model.DateTime changeDateTime = 2;</code>
     */
    public Builder mergeChangeDateTime(dominvest.backend.core.model.DateTime value) {
      if (changeDateTimeBuilder_ == null) {
        if (changeDateTime_ != null) {
          changeDateTime_ =
            dominvest.backend.core.model.DateTime.newBuilder(changeDateTime_).mergeFrom(value).buildPartial();
        } else {
          changeDateTime_ = value;
        }
        onChanged();
      } else {
        changeDateTimeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Дата и время изменения заявки. Может заполняться так же createDateTime или не заполняться
     * </pre>
     *
     * <code>.dominvest.backend.core.model.DateTime changeDateTime = 2;</code>
     */
    public Builder clearChangeDateTime() {
      if (changeDateTimeBuilder_ == null) {
        changeDateTime_ = null;
        onChanged();
      } else {
        changeDateTime_ = null;
        changeDateTimeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Дата и время изменения заявки. Может заполняться так же createDateTime или не заполняться
     * </pre>
     *
     * <code>.dominvest.backend.core.model.DateTime changeDateTime = 2;</code>
     */
    public dominvest.backend.core.model.DateTime.Builder getChangeDateTimeBuilder() {
      
      onChanged();
      return getChangeDateTimeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Дата и время изменения заявки. Может заполняться так же createDateTime или не заполняться
     * </pre>
     *
     * <code>.dominvest.backend.core.model.DateTime changeDateTime = 2;</code>
     */
    public dominvest.backend.core.model.DateTimeOrBuilder getChangeDateTimeOrBuilder() {
      if (changeDateTimeBuilder_ != null) {
        return changeDateTimeBuilder_.getMessageOrBuilder();
      } else {
        return changeDateTime_ == null ?
            dominvest.backend.core.model.DateTime.getDefaultInstance() : changeDateTime_;
      }
    }
    /**
     * <pre>
     * Дата и время изменения заявки. Может заполняться так же createDateTime или не заполняться
     * </pre>
     *
     * <code>.dominvest.backend.core.model.DateTime changeDateTime = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        dominvest.backend.core.model.DateTime, dominvest.backend.core.model.DateTime.Builder, dominvest.backend.core.model.DateTimeOrBuilder> 
        getChangeDateTimeFieldBuilder() {
      if (changeDateTimeBuilder_ == null) {
        changeDateTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            dominvest.backend.core.model.DateTime, dominvest.backend.core.model.DateTime.Builder, dominvest.backend.core.model.DateTimeOrBuilder>(
                getChangeDateTime(),
                getParentForChildren(),
                isClean());
        changeDateTime_ = null;
      }
      return changeDateTimeBuilder_;
    }

    private java.lang.Object clientId_ = "";
    /**
     * <pre>
     * сквозной id клиента по всем БД ДОМ.Инвест
     * </pre>
     *
     * <code>string clientId = 3;</code>
     */
    public java.lang.String getClientId() {
      java.lang.Object ref = clientId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        clientId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * сквозной id клиента по всем БД ДОМ.Инвест
     * </pre>
     *
     * <code>string clientId = 3;</code>
     */
    public com.google.protobuf.ByteString
        getClientIdBytes() {
      java.lang.Object ref = clientId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        clientId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * сквозной id клиента по всем БД ДОМ.Инвест
     * </pre>
     *
     * <code>string clientId = 3;</code>
     */
    public Builder setClientId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      clientId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * сквозной id клиента по всем БД ДОМ.Инвест
     * </pre>
     *
     * <code>string clientId = 3;</code>
     */
    public Builder clearClientId() {
      
      clientId_ = getDefaultInstance().getClientId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * сквозной id клиента по всем БД ДОМ.Инвест
     * </pre>
     *
     * <code>string clientId = 3;</code>
     */
    public Builder setClientIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      clientId_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object ticker_ = "";
    /**
     * <pre>
     * Тикер
     * </pre>
     *
     * <code>string ticker = 4;</code>
     */
    public java.lang.String getTicker() {
      java.lang.Object ref = ticker_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        ticker_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Тикер
     * </pre>
     *
     * <code>string ticker = 4;</code>
     */
    public com.google.protobuf.ByteString
        getTickerBytes() {
      java.lang.Object ref = ticker_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        ticker_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Тикер
     * </pre>
     *
     * <code>string ticker = 4;</code>
     */
    public Builder setTicker(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      ticker_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Тикер
     * </pre>
     *
     * <code>string ticker = 4;</code>
     */
    public Builder clearTicker() {
      
      ticker_ = getDefaultInstance().getTicker();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Тикер
     * </pre>
     *
     * <code>string ticker = 4;</code>
     */
    public Builder setTickerBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      ticker_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object securityId_ = "";
    /**
     * <pre>
     * id инструмента. Обычно строка из 3-х частей через точку: id инструмента, id борды, id биржи. Для не биржевых инструментов без режима торгов. Для валют просто RUB, EUR, USD
     * </pre>
     *
     * <code>string securityId = 5;</code>
     */
    public java.lang.String getSecurityId() {
      java.lang.Object ref = securityId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        securityId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * id инструмента. Обычно строка из 3-х частей через точку: id инструмента, id борды, id биржи. Для не биржевых инструментов без режима торгов. Для валют просто RUB, EUR, USD
     * </pre>
     *
     * <code>string securityId = 5;</code>
     */
    public com.google.protobuf.ByteString
        getSecurityIdBytes() {
      java.lang.Object ref = securityId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        securityId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * id инструмента. Обычно строка из 3-х частей через точку: id инструмента, id борды, id биржи. Для не биржевых инструментов без режима торгов. Для валют просто RUB, EUR, USD
     * </pre>
     *
     * <code>string securityId = 5;</code>
     */
    public Builder setSecurityId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      securityId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * id инструмента. Обычно строка из 3-х частей через точку: id инструмента, id борды, id биржи. Для не биржевых инструментов без режима торгов. Для валют просто RUB, EUR, USD
     * </pre>
     *
     * <code>string securityId = 5;</code>
     */
    public Builder clearSecurityId() {
      
      securityId_ = getDefaultInstance().getSecurityId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * id инструмента. Обычно строка из 3-х частей через точку: id инструмента, id борды, id биржи. Для не биржевых инструментов без режима торгов. Для валют просто RUB, EUR, USD
     * </pre>
     *
     * <code>string securityId = 5;</code>
     */
    public Builder setSecurityIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      securityId_ = value;
      onChanged();
      return this;
    }

    private int type_ = 0;
    /**
     * <pre>
     * Тип заявки (по справочнику), строка
     * </pre>
     *
     * <code>.dominvest.backend.core.model.OrderType type = 6;</code>
     */
    public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * Тип заявки (по справочнику), строка
     * </pre>
     *
     * <code>.dominvest.backend.core.model.OrderType type = 6;</code>
     */
    public Builder setTypeValue(int value) {
      type_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Тип заявки (по справочнику), строка
     * </pre>
     *
     * <code>.dominvest.backend.core.model.OrderType type = 6;</code>
     */
    public dominvest.backend.core.model.OrderType getType() {
      @SuppressWarnings("deprecation")
      dominvest.backend.core.model.OrderType result = dominvest.backend.core.model.OrderType.valueOf(type_);
      return result == null ? dominvest.backend.core.model.OrderType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Тип заявки (по справочнику), строка
     * </pre>
     *
     * <code>.dominvest.backend.core.model.OrderType type = 6;</code>
     */
    public Builder setType(dominvest.backend.core.model.OrderType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      type_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Тип заявки (по справочнику), строка
     * </pre>
     *
     * <code>.dominvest.backend.core.model.OrderType type = 6;</code>
     */
    public Builder clearType() {
      
      type_ = 0;
      onChanged();
      return this;
    }

    private int action_ = 0;
    /**
     * <pre>
     * При создании заявки ставится CREATE, при отмене заявки CANCEL
     * </pre>
     *
     * <code>.dominvest.backend.core.model.OrderAction action = 7;</code>
     */
    public int getActionValue() {
      return action_;
    }
    /**
     * <pre>
     * При создании заявки ставится CREATE, при отмене заявки CANCEL
     * </pre>
     *
     * <code>.dominvest.backend.core.model.OrderAction action = 7;</code>
     */
    public Builder setActionValue(int value) {
      action_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * При создании заявки ставится CREATE, при отмене заявки CANCEL
     * </pre>
     *
     * <code>.dominvest.backend.core.model.OrderAction action = 7;</code>
     */
    public dominvest.backend.core.model.OrderAction getAction() {
      @SuppressWarnings("deprecation")
      dominvest.backend.core.model.OrderAction result = dominvest.backend.core.model.OrderAction.valueOf(action_);
      return result == null ? dominvest.backend.core.model.OrderAction.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * При создании заявки ставится CREATE, при отмене заявки CANCEL
     * </pre>
     *
     * <code>.dominvest.backend.core.model.OrderAction action = 7;</code>
     */
    public Builder setAction(dominvest.backend.core.model.OrderAction value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      action_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * При создании заявки ставится CREATE, при отмене заявки CANCEL
     * </pre>
     *
     * <code>.dominvest.backend.core.model.OrderAction action = 7;</code>
     */
    public Builder clearAction() {
      
      action_ = 0;
      onChanged();
      return this;
    }

    private int status_ = 0;
    /**
     * <pre>
     * Статус заявки (по справочнику)
     * </pre>
     *
     * <code>.dominvest.backend.core.model.OrderStatus status = 8;</code>
     */
    public int getStatusValue() {
      return status_;
    }
    /**
     * <pre>
     * Статус заявки (по справочнику)
     * </pre>
     *
     * <code>.dominvest.backend.core.model.OrderStatus status = 8;</code>
     */
    public Builder setStatusValue(int value) {
      status_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Статус заявки (по справочнику)
     * </pre>
     *
     * <code>.dominvest.backend.core.model.OrderStatus status = 8;</code>
     */
    public dominvest.backend.core.model.OrderStatus getStatus() {
      @SuppressWarnings("deprecation")
      dominvest.backend.core.model.OrderStatus result = dominvest.backend.core.model.OrderStatus.valueOf(status_);
      return result == null ? dominvest.backend.core.model.OrderStatus.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Статус заявки (по справочнику)
     * </pre>
     *
     * <code>.dominvest.backend.core.model.OrderStatus status = 8;</code>
     */
    public Builder setStatus(dominvest.backend.core.model.OrderStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      status_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Статус заявки (по справочнику)
     * </pre>
     *
     * <code>.dominvest.backend.core.model.OrderStatus status = 8;</code>
     */
    public Builder clearStatus() {
      
      status_ = 0;
      onChanged();
      return this;
    }

    private int failReason_ = 0;
    /**
     * <pre>
     * Причина отклонения заявки (по справочнику)
     * </pre>
     *
     * <code>.dominvest.backend.core.model.OrderFailReason failReason = 9;</code>
     */
    public int getFailReasonValue() {
      return failReason_;
    }
    /**
     * <pre>
     * Причина отклонения заявки (по справочнику)
     * </pre>
     *
     * <code>.dominvest.backend.core.model.OrderFailReason failReason = 9;</code>
     */
    public Builder setFailReasonValue(int value) {
      failReason_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Причина отклонения заявки (по справочнику)
     * </pre>
     *
     * <code>.dominvest.backend.core.model.OrderFailReason failReason = 9;</code>
     */
    public dominvest.backend.core.model.OrderFailReason getFailReason() {
      @SuppressWarnings("deprecation")
      dominvest.backend.core.model.OrderFailReason result = dominvest.backend.core.model.OrderFailReason.valueOf(failReason_);
      return result == null ? dominvest.backend.core.model.OrderFailReason.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Причина отклонения заявки (по справочнику)
     * </pre>
     *
     * <code>.dominvest.backend.core.model.OrderFailReason failReason = 9;</code>
     */
    public Builder setFailReason(dominvest.backend.core.model.OrderFailReason value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      failReason_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Причина отклонения заявки (по справочнику)
     * </pre>
     *
     * <code>.dominvest.backend.core.model.OrderFailReason failReason = 9;</code>
     */
    public Builder clearFailReason() {
      
      failReason_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object failText_ = "";
    /**
     * <pre>
     * Текст, причина отклонения заявки, например order is not accepted in this trading session
     * </pre>
     *
     * <code>string failText = 10;</code>
     */
    public java.lang.String getFailText() {
      java.lang.Object ref = failText_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        failText_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Текст, причина отклонения заявки, например order is not accepted in this trading session
     * </pre>
     *
     * <code>string failText = 10;</code>
     */
    public com.google.protobuf.ByteString
        getFailTextBytes() {
      java.lang.Object ref = failText_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        failText_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Текст, причина отклонения заявки, например order is not accepted in this trading session
     * </pre>
     *
     * <code>string failText = 10;</code>
     */
    public Builder setFailText(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      failText_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Текст, причина отклонения заявки, например order is not accepted in this trading session
     * </pre>
     *
     * <code>string failText = 10;</code>
     */
    public Builder clearFailText() {
      
      failText_ = getDefaultInstance().getFailText();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Текст, причина отклонения заявки, например order is not accepted in this trading session
     * </pre>
     *
     * <code>string failText = 10;</code>
     */
    public Builder setFailTextBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      failText_ = value;
      onChanged();
      return this;
    }

    private int side_ = 0;
    /**
     * <pre>
     * Заявка на покупку или продажу buy/sell
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Side side = 11;</code>
     */
    public int getSideValue() {
      return side_;
    }
    /**
     * <pre>
     * Заявка на покупку или продажу buy/sell
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Side side = 11;</code>
     */
    public Builder setSideValue(int value) {
      side_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Заявка на покупку или продажу buy/sell
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Side side = 11;</code>
     */
    public dominvest.backend.core.model.Side getSide() {
      @SuppressWarnings("deprecation")
      dominvest.backend.core.model.Side result = dominvest.backend.core.model.Side.valueOf(side_);
      return result == null ? dominvest.backend.core.model.Side.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Заявка на покупку или продажу buy/sell
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Side side = 11;</code>
     */
    public Builder setSide(dominvest.backend.core.model.Side value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      side_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Заявка на покупку или продажу buy/sell
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Side side = 11;</code>
     */
    public Builder clearSide() {
      
      side_ = 0;
      onChanged();
      return this;
    }

    private dominvest.backend.core.model.Decimal lotSize_;
    private com.google.protobuf.SingleFieldBuilderV3<
        dominvest.backend.core.model.Decimal, dominvest.backend.core.model.Decimal.Builder, dominvest.backend.core.model.DecimalOrBuilder> lotSizeBuilder_;
    /**
     * <pre>
     * Размер лота
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal lotSize = 12;</code>
     */
    public boolean hasLotSize() {
      return lotSizeBuilder_ != null || lotSize_ != null;
    }
    /**
     * <pre>
     * Размер лота
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal lotSize = 12;</code>
     */
    public dominvest.backend.core.model.Decimal getLotSize() {
      if (lotSizeBuilder_ == null) {
        return lotSize_ == null ? dominvest.backend.core.model.Decimal.getDefaultInstance() : lotSize_;
      } else {
        return lotSizeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Размер лота
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal lotSize = 12;</code>
     */
    public Builder setLotSize(dominvest.backend.core.model.Decimal value) {
      if (lotSizeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        lotSize_ = value;
        onChanged();
      } else {
        lotSizeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Размер лота
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal lotSize = 12;</code>
     */
    public Builder setLotSize(
        dominvest.backend.core.model.Decimal.Builder builderForValue) {
      if (lotSizeBuilder_ == null) {
        lotSize_ = builderForValue.build();
        onChanged();
      } else {
        lotSizeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Размер лота
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal lotSize = 12;</code>
     */
    public Builder mergeLotSize(dominvest.backend.core.model.Decimal value) {
      if (lotSizeBuilder_ == null) {
        if (lotSize_ != null) {
          lotSize_ =
            dominvest.backend.core.model.Decimal.newBuilder(lotSize_).mergeFrom(value).buildPartial();
        } else {
          lotSize_ = value;
        }
        onChanged();
      } else {
        lotSizeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Размер лота
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal lotSize = 12;</code>
     */
    public Builder clearLotSize() {
      if (lotSizeBuilder_ == null) {
        lotSize_ = null;
        onChanged();
      } else {
        lotSize_ = null;
        lotSizeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Размер лота
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal lotSize = 12;</code>
     */
    public dominvest.backend.core.model.Decimal.Builder getLotSizeBuilder() {
      
      onChanged();
      return getLotSizeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Размер лота
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal lotSize = 12;</code>
     */
    public dominvest.backend.core.model.DecimalOrBuilder getLotSizeOrBuilder() {
      if (lotSizeBuilder_ != null) {
        return lotSizeBuilder_.getMessageOrBuilder();
      } else {
        return lotSize_ == null ?
            dominvest.backend.core.model.Decimal.getDefaultInstance() : lotSize_;
      }
    }
    /**
     * <pre>
     * Размер лота
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal lotSize = 12;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        dominvest.backend.core.model.Decimal, dominvest.backend.core.model.Decimal.Builder, dominvest.backend.core.model.DecimalOrBuilder> 
        getLotSizeFieldBuilder() {
      if (lotSizeBuilder_ == null) {
        lotSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            dominvest.backend.core.model.Decimal, dominvest.backend.core.model.Decimal.Builder, dominvest.backend.core.model.DecimalOrBuilder>(
                getLotSize(),
                getParentForChildren(),
                isClean());
        lotSize_ = null;
      }
      return lotSizeBuilder_;
    }

    private dominvest.backend.core.model.Decimal lotQty_;
    private com.google.protobuf.SingleFieldBuilderV3<
        dominvest.backend.core.model.Decimal, dominvest.backend.core.model.Decimal.Builder, dominvest.backend.core.model.DecimalOrBuilder> lotQtyBuilder_;
    /**
     * <pre>
     * Кол-во лотов
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal lotQty = 13;</code>
     */
    public boolean hasLotQty() {
      return lotQtyBuilder_ != null || lotQty_ != null;
    }
    /**
     * <pre>
     * Кол-во лотов
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal lotQty = 13;</code>
     */
    public dominvest.backend.core.model.Decimal getLotQty() {
      if (lotQtyBuilder_ == null) {
        return lotQty_ == null ? dominvest.backend.core.model.Decimal.getDefaultInstance() : lotQty_;
      } else {
        return lotQtyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Кол-во лотов
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal lotQty = 13;</code>
     */
    public Builder setLotQty(dominvest.backend.core.model.Decimal value) {
      if (lotQtyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        lotQty_ = value;
        onChanged();
      } else {
        lotQtyBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Кол-во лотов
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal lotQty = 13;</code>
     */
    public Builder setLotQty(
        dominvest.backend.core.model.Decimal.Builder builderForValue) {
      if (lotQtyBuilder_ == null) {
        lotQty_ = builderForValue.build();
        onChanged();
      } else {
        lotQtyBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Кол-во лотов
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal lotQty = 13;</code>
     */
    public Builder mergeLotQty(dominvest.backend.core.model.Decimal value) {
      if (lotQtyBuilder_ == null) {
        if (lotQty_ != null) {
          lotQty_ =
            dominvest.backend.core.model.Decimal.newBuilder(lotQty_).mergeFrom(value).buildPartial();
        } else {
          lotQty_ = value;
        }
        onChanged();
      } else {
        lotQtyBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Кол-во лотов
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal lotQty = 13;</code>
     */
    public Builder clearLotQty() {
      if (lotQtyBuilder_ == null) {
        lotQty_ = null;
        onChanged();
      } else {
        lotQty_ = null;
        lotQtyBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Кол-во лотов
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal lotQty = 13;</code>
     */
    public dominvest.backend.core.model.Decimal.Builder getLotQtyBuilder() {
      
      onChanged();
      return getLotQtyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Кол-во лотов
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal lotQty = 13;</code>
     */
    public dominvest.backend.core.model.DecimalOrBuilder getLotQtyOrBuilder() {
      if (lotQtyBuilder_ != null) {
        return lotQtyBuilder_.getMessageOrBuilder();
      } else {
        return lotQty_ == null ?
            dominvest.backend.core.model.Decimal.getDefaultInstance() : lotQty_;
      }
    }
    /**
     * <pre>
     * Кол-во лотов
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal lotQty = 13;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        dominvest.backend.core.model.Decimal, dominvest.backend.core.model.Decimal.Builder, dominvest.backend.core.model.DecimalOrBuilder> 
        getLotQtyFieldBuilder() {
      if (lotQtyBuilder_ == null) {
        lotQtyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            dominvest.backend.core.model.Decimal, dominvest.backend.core.model.Decimal.Builder, dominvest.backend.core.model.DecimalOrBuilder>(
                getLotQty(),
                getParentForChildren(),
                isClean());
        lotQty_ = null;
      }
      return lotQtyBuilder_;
    }

    private dominvest.backend.core.model.Decimal filledQty_;
    private com.google.protobuf.SingleFieldBuilderV3<
        dominvest.backend.core.model.Decimal, dominvest.backend.core.model.Decimal.Builder, dominvest.backend.core.model.DecimalOrBuilder> filledQtyBuilder_;
    /**
     * <pre>
     * Уже купленное/проданное кол-во лотов, если заявка исполняется частями
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal filledQty = 14;</code>
     */
    public boolean hasFilledQty() {
      return filledQtyBuilder_ != null || filledQty_ != null;
    }
    /**
     * <pre>
     * Уже купленное/проданное кол-во лотов, если заявка исполняется частями
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal filledQty = 14;</code>
     */
    public dominvest.backend.core.model.Decimal getFilledQty() {
      if (filledQtyBuilder_ == null) {
        return filledQty_ == null ? dominvest.backend.core.model.Decimal.getDefaultInstance() : filledQty_;
      } else {
        return filledQtyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Уже купленное/проданное кол-во лотов, если заявка исполняется частями
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal filledQty = 14;</code>
     */
    public Builder setFilledQty(dominvest.backend.core.model.Decimal value) {
      if (filledQtyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        filledQty_ = value;
        onChanged();
      } else {
        filledQtyBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Уже купленное/проданное кол-во лотов, если заявка исполняется частями
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal filledQty = 14;</code>
     */
    public Builder setFilledQty(
        dominvest.backend.core.model.Decimal.Builder builderForValue) {
      if (filledQtyBuilder_ == null) {
        filledQty_ = builderForValue.build();
        onChanged();
      } else {
        filledQtyBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Уже купленное/проданное кол-во лотов, если заявка исполняется частями
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal filledQty = 14;</code>
     */
    public Builder mergeFilledQty(dominvest.backend.core.model.Decimal value) {
      if (filledQtyBuilder_ == null) {
        if (filledQty_ != null) {
          filledQty_ =
            dominvest.backend.core.model.Decimal.newBuilder(filledQty_).mergeFrom(value).buildPartial();
        } else {
          filledQty_ = value;
        }
        onChanged();
      } else {
        filledQtyBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Уже купленное/проданное кол-во лотов, если заявка исполняется частями
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal filledQty = 14;</code>
     */
    public Builder clearFilledQty() {
      if (filledQtyBuilder_ == null) {
        filledQty_ = null;
        onChanged();
      } else {
        filledQty_ = null;
        filledQtyBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Уже купленное/проданное кол-во лотов, если заявка исполняется частями
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal filledQty = 14;</code>
     */
    public dominvest.backend.core.model.Decimal.Builder getFilledQtyBuilder() {
      
      onChanged();
      return getFilledQtyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Уже купленное/проданное кол-во лотов, если заявка исполняется частями
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal filledQty = 14;</code>
     */
    public dominvest.backend.core.model.DecimalOrBuilder getFilledQtyOrBuilder() {
      if (filledQtyBuilder_ != null) {
        return filledQtyBuilder_.getMessageOrBuilder();
      } else {
        return filledQty_ == null ?
            dominvest.backend.core.model.Decimal.getDefaultInstance() : filledQty_;
      }
    }
    /**
     * <pre>
     * Уже купленное/проданное кол-во лотов, если заявка исполняется частями
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal filledQty = 14;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        dominvest.backend.core.model.Decimal, dominvest.backend.core.model.Decimal.Builder, dominvest.backend.core.model.DecimalOrBuilder> 
        getFilledQtyFieldBuilder() {
      if (filledQtyBuilder_ == null) {
        filledQtyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            dominvest.backend.core.model.Decimal, dominvest.backend.core.model.Decimal.Builder, dominvest.backend.core.model.DecimalOrBuilder>(
                getFilledQty(),
                getParentForChildren(),
                isClean());
        filledQty_ = null;
      }
      return filledQtyBuilder_;
    }

    private dominvest.backend.core.model.Decimal price_;
    private com.google.protobuf.SingleFieldBuilderV3<
        dominvest.backend.core.model.Decimal, dominvest.backend.core.model.Decimal.Builder, dominvest.backend.core.model.DecimalOrBuilder> priceBuilder_;
    /**
     * <pre>
     * Цена за ед. Когда отправляется уже одобренная заявка в FixGate - указывается только для заявок с типами limit, gtd, limitLoss, limitProfit. Для рыночных заявок не указывается
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal price = 15;</code>
     */
    public boolean hasPrice() {
      return priceBuilder_ != null || price_ != null;
    }
    /**
     * <pre>
     * Цена за ед. Когда отправляется уже одобренная заявка в FixGate - указывается только для заявок с типами limit, gtd, limitLoss, limitProfit. Для рыночных заявок не указывается
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal price = 15;</code>
     */
    public dominvest.backend.core.model.Decimal getPrice() {
      if (priceBuilder_ == null) {
        return price_ == null ? dominvest.backend.core.model.Decimal.getDefaultInstance() : price_;
      } else {
        return priceBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Цена за ед. Когда отправляется уже одобренная заявка в FixGate - указывается только для заявок с типами limit, gtd, limitLoss, limitProfit. Для рыночных заявок не указывается
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal price = 15;</code>
     */
    public Builder setPrice(dominvest.backend.core.model.Decimal value) {
      if (priceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        price_ = value;
        onChanged();
      } else {
        priceBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Цена за ед. Когда отправляется уже одобренная заявка в FixGate - указывается только для заявок с типами limit, gtd, limitLoss, limitProfit. Для рыночных заявок не указывается
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal price = 15;</code>
     */
    public Builder setPrice(
        dominvest.backend.core.model.Decimal.Builder builderForValue) {
      if (priceBuilder_ == null) {
        price_ = builderForValue.build();
        onChanged();
      } else {
        priceBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Цена за ед. Когда отправляется уже одобренная заявка в FixGate - указывается только для заявок с типами limit, gtd, limitLoss, limitProfit. Для рыночных заявок не указывается
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal price = 15;</code>
     */
    public Builder mergePrice(dominvest.backend.core.model.Decimal value) {
      if (priceBuilder_ == null) {
        if (price_ != null) {
          price_ =
            dominvest.backend.core.model.Decimal.newBuilder(price_).mergeFrom(value).buildPartial();
        } else {
          price_ = value;
        }
        onChanged();
      } else {
        priceBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Цена за ед. Когда отправляется уже одобренная заявка в FixGate - указывается только для заявок с типами limit, gtd, limitLoss, limitProfit. Для рыночных заявок не указывается
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal price = 15;</code>
     */
    public Builder clearPrice() {
      if (priceBuilder_ == null) {
        price_ = null;
        onChanged();
      } else {
        price_ = null;
        priceBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Цена за ед. Когда отправляется уже одобренная заявка в FixGate - указывается только для заявок с типами limit, gtd, limitLoss, limitProfit. Для рыночных заявок не указывается
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal price = 15;</code>
     */
    public dominvest.backend.core.model.Decimal.Builder getPriceBuilder() {
      
      onChanged();
      return getPriceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Цена за ед. Когда отправляется уже одобренная заявка в FixGate - указывается только для заявок с типами limit, gtd, limitLoss, limitProfit. Для рыночных заявок не указывается
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal price = 15;</code>
     */
    public dominvest.backend.core.model.DecimalOrBuilder getPriceOrBuilder() {
      if (priceBuilder_ != null) {
        return priceBuilder_.getMessageOrBuilder();
      } else {
        return price_ == null ?
            dominvest.backend.core.model.Decimal.getDefaultInstance() : price_;
      }
    }
    /**
     * <pre>
     * Цена за ед. Когда отправляется уже одобренная заявка в FixGate - указывается только для заявок с типами limit, gtd, limitLoss, limitProfit. Для рыночных заявок не указывается
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal price = 15;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        dominvest.backend.core.model.Decimal, dominvest.backend.core.model.Decimal.Builder, dominvest.backend.core.model.DecimalOrBuilder> 
        getPriceFieldBuilder() {
      if (priceBuilder_ == null) {
        priceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            dominvest.backend.core.model.Decimal, dominvest.backend.core.model.Decimal.Builder, dominvest.backend.core.model.DecimalOrBuilder>(
                getPrice(),
                getParentForChildren(),
                isClean());
        price_ = null;
      }
      return priceBuilder_;
    }

    private dominvest.backend.core.model.Decimal triggerPrice_;
    private com.google.protobuf.SingleFieldBuilderV3<
        dominvest.backend.core.model.Decimal, dominvest.backend.core.model.Decimal.Builder, dominvest.backend.core.model.DecimalOrBuilder> triggerPriceBuilder_;
    /**
     * <pre>
     * Граничная цена (применяется для заявок limitLoss, limitProfit, marketLoss, marketProfit). Цена, при которой заявка будет выставлена на биржу. При этом заявки marketLoss, marketProfit будут выставлены по рыночной цене, а заявки limitLoss, limitProfit - по цене, указанной в заявке.
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal triggerPrice = 16;</code>
     */
    public boolean hasTriggerPrice() {
      return triggerPriceBuilder_ != null || triggerPrice_ != null;
    }
    /**
     * <pre>
     * Граничная цена (применяется для заявок limitLoss, limitProfit, marketLoss, marketProfit). Цена, при которой заявка будет выставлена на биржу. При этом заявки marketLoss, marketProfit будут выставлены по рыночной цене, а заявки limitLoss, limitProfit - по цене, указанной в заявке.
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal triggerPrice = 16;</code>
     */
    public dominvest.backend.core.model.Decimal getTriggerPrice() {
      if (triggerPriceBuilder_ == null) {
        return triggerPrice_ == null ? dominvest.backend.core.model.Decimal.getDefaultInstance() : triggerPrice_;
      } else {
        return triggerPriceBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Граничная цена (применяется для заявок limitLoss, limitProfit, marketLoss, marketProfit). Цена, при которой заявка будет выставлена на биржу. При этом заявки marketLoss, marketProfit будут выставлены по рыночной цене, а заявки limitLoss, limitProfit - по цене, указанной в заявке.
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal triggerPrice = 16;</code>
     */
    public Builder setTriggerPrice(dominvest.backend.core.model.Decimal value) {
      if (triggerPriceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        triggerPrice_ = value;
        onChanged();
      } else {
        triggerPriceBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Граничная цена (применяется для заявок limitLoss, limitProfit, marketLoss, marketProfit). Цена, при которой заявка будет выставлена на биржу. При этом заявки marketLoss, marketProfit будут выставлены по рыночной цене, а заявки limitLoss, limitProfit - по цене, указанной в заявке.
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal triggerPrice = 16;</code>
     */
    public Builder setTriggerPrice(
        dominvest.backend.core.model.Decimal.Builder builderForValue) {
      if (triggerPriceBuilder_ == null) {
        triggerPrice_ = builderForValue.build();
        onChanged();
      } else {
        triggerPriceBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Граничная цена (применяется для заявок limitLoss, limitProfit, marketLoss, marketProfit). Цена, при которой заявка будет выставлена на биржу. При этом заявки marketLoss, marketProfit будут выставлены по рыночной цене, а заявки limitLoss, limitProfit - по цене, указанной в заявке.
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal triggerPrice = 16;</code>
     */
    public Builder mergeTriggerPrice(dominvest.backend.core.model.Decimal value) {
      if (triggerPriceBuilder_ == null) {
        if (triggerPrice_ != null) {
          triggerPrice_ =
            dominvest.backend.core.model.Decimal.newBuilder(triggerPrice_).mergeFrom(value).buildPartial();
        } else {
          triggerPrice_ = value;
        }
        onChanged();
      } else {
        triggerPriceBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Граничная цена (применяется для заявок limitLoss, limitProfit, marketLoss, marketProfit). Цена, при которой заявка будет выставлена на биржу. При этом заявки marketLoss, marketProfit будут выставлены по рыночной цене, а заявки limitLoss, limitProfit - по цене, указанной в заявке.
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal triggerPrice = 16;</code>
     */
    public Builder clearTriggerPrice() {
      if (triggerPriceBuilder_ == null) {
        triggerPrice_ = null;
        onChanged();
      } else {
        triggerPrice_ = null;
        triggerPriceBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Граничная цена (применяется для заявок limitLoss, limitProfit, marketLoss, marketProfit). Цена, при которой заявка будет выставлена на биржу. При этом заявки marketLoss, marketProfit будут выставлены по рыночной цене, а заявки limitLoss, limitProfit - по цене, указанной в заявке.
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal triggerPrice = 16;</code>
     */
    public dominvest.backend.core.model.Decimal.Builder getTriggerPriceBuilder() {
      
      onChanged();
      return getTriggerPriceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Граничная цена (применяется для заявок limitLoss, limitProfit, marketLoss, marketProfit). Цена, при которой заявка будет выставлена на биржу. При этом заявки marketLoss, marketProfit будут выставлены по рыночной цене, а заявки limitLoss, limitProfit - по цене, указанной в заявке.
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal triggerPrice = 16;</code>
     */
    public dominvest.backend.core.model.DecimalOrBuilder getTriggerPriceOrBuilder() {
      if (triggerPriceBuilder_ != null) {
        return triggerPriceBuilder_.getMessageOrBuilder();
      } else {
        return triggerPrice_ == null ?
            dominvest.backend.core.model.Decimal.getDefaultInstance() : triggerPrice_;
      }
    }
    /**
     * <pre>
     * Граничная цена (применяется для заявок limitLoss, limitProfit, marketLoss, marketProfit). Цена, при которой заявка будет выставлена на биржу. При этом заявки marketLoss, marketProfit будут выставлены по рыночной цене, а заявки limitLoss, limitProfit - по цене, указанной в заявке.
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Decimal triggerPrice = 16;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        dominvest.backend.core.model.Decimal, dominvest.backend.core.model.Decimal.Builder, dominvest.backend.core.model.DecimalOrBuilder> 
        getTriggerPriceFieldBuilder() {
      if (triggerPriceBuilder_ == null) {
        triggerPriceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            dominvest.backend.core.model.Decimal, dominvest.backend.core.model.Decimal.Builder, dominvest.backend.core.model.DecimalOrBuilder>(
                getTriggerPrice(),
                getParentForChildren(),
                isClean());
        triggerPrice_ = null;
      }
      return triggerPriceBuilder_;
    }

    private java.lang.Object currency_ = "";
    /**
     * <pre>
     * Валюта, например, RUB
     * </pre>
     *
     * <code>string currency = 17;</code>
     */
    public java.lang.String getCurrency() {
      java.lang.Object ref = currency_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        currency_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Валюта, например, RUB
     * </pre>
     *
     * <code>string currency = 17;</code>
     */
    public com.google.protobuf.ByteString
        getCurrencyBytes() {
      java.lang.Object ref = currency_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        currency_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Валюта, например, RUB
     * </pre>
     *
     * <code>string currency = 17;</code>
     */
    public Builder setCurrency(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      currency_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Валюта, например, RUB
     * </pre>
     *
     * <code>string currency = 17;</code>
     */
    public Builder clearCurrency() {
      
      currency_ = getDefaultInstance().getCurrency();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Валюта, например, RUB
     * </pre>
     *
     * <code>string currency = 17;</code>
     */
    public Builder setCurrencyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      currency_ = value;
      onChanged();
      return this;
    }

    private int exchange_ = 0;
    /**
     * <pre>
     * Биржа, например, MOEX
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Exchange exchange = 18;</code>
     */
    public int getExchangeValue() {
      return exchange_;
    }
    /**
     * <pre>
     * Биржа, например, MOEX
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Exchange exchange = 18;</code>
     */
    public Builder setExchangeValue(int value) {
      exchange_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Биржа, например, MOEX
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Exchange exchange = 18;</code>
     */
    public dominvest.backend.core.model.Exchange getExchange() {
      @SuppressWarnings("deprecation")
      dominvest.backend.core.model.Exchange result = dominvest.backend.core.model.Exchange.valueOf(exchange_);
      return result == null ? dominvest.backend.core.model.Exchange.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Биржа, например, MOEX
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Exchange exchange = 18;</code>
     */
    public Builder setExchange(dominvest.backend.core.model.Exchange value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      exchange_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Биржа, например, MOEX
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Exchange exchange = 18;</code>
     */
    public Builder clearExchange() {
      
      exchange_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object board_ = "";
    /**
     * <pre>
     * Борда биржи, например TQOB
     * </pre>
     *
     * <code>string board = 19;</code>
     */
    public java.lang.String getBoard() {
      java.lang.Object ref = board_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        board_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Борда биржи, например TQOB
     * </pre>
     *
     * <code>string board = 19;</code>
     */
    public com.google.protobuf.ByteString
        getBoardBytes() {
      java.lang.Object ref = board_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        board_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Борда биржи, например TQOB
     * </pre>
     *
     * <code>string board = 19;</code>
     */
    public Builder setBoard(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      board_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Борда биржи, например TQOB
     * </pre>
     *
     * <code>string board = 19;</code>
     */
    public Builder clearBoard() {
      
      board_ = getDefaultInstance().getBoard();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Борда биржи, например TQOB
     * </pre>
     *
     * <code>string board = 19;</code>
     */
    public Builder setBoardBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      board_ = value;
      onChanged();
      return this;
    }

    private long orderId_ ;
    /**
     * <pre>
     * id заявки
     * </pre>
     *
     * <code>uint64 orderId = 20;</code>
     */
    public long getOrderId() {
      return orderId_;
    }
    /**
     * <pre>
     * id заявки
     * </pre>
     *
     * <code>uint64 orderId = 20;</code>
     */
    public Builder setOrderId(long value) {
      
      orderId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * id заявки
     * </pre>
     *
     * <code>uint64 orderId = 20;</code>
     */
    public Builder clearOrderId() {
      
      orderId_ = 0L;
      onChanged();
      return this;
    }

    private dominvest.backend.core.model.Date gtdDate_;
    private com.google.protobuf.SingleFieldBuilderV3<
        dominvest.backend.core.model.Date, dominvest.backend.core.model.Date.Builder, dominvest.backend.core.model.DateOrBuilder> gtdDateBuilder_;
    /**
     * <pre>
     * Только для заявок с типом GTD: дата до которой включительно нужно исполнить заявку. Если не исполнить - на отменяется
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Date gtdDate = 21;</code>
     */
    public boolean hasGtdDate() {
      return gtdDateBuilder_ != null || gtdDate_ != null;
    }
    /**
     * <pre>
     * Только для заявок с типом GTD: дата до которой включительно нужно исполнить заявку. Если не исполнить - на отменяется
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Date gtdDate = 21;</code>
     */
    public dominvest.backend.core.model.Date getGtdDate() {
      if (gtdDateBuilder_ == null) {
        return gtdDate_ == null ? dominvest.backend.core.model.Date.getDefaultInstance() : gtdDate_;
      } else {
        return gtdDateBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Только для заявок с типом GTD: дата до которой включительно нужно исполнить заявку. Если не исполнить - на отменяется
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Date gtdDate = 21;</code>
     */
    public Builder setGtdDate(dominvest.backend.core.model.Date value) {
      if (gtdDateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        gtdDate_ = value;
        onChanged();
      } else {
        gtdDateBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Только для заявок с типом GTD: дата до которой включительно нужно исполнить заявку. Если не исполнить - на отменяется
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Date gtdDate = 21;</code>
     */
    public Builder setGtdDate(
        dominvest.backend.core.model.Date.Builder builderForValue) {
      if (gtdDateBuilder_ == null) {
        gtdDate_ = builderForValue.build();
        onChanged();
      } else {
        gtdDateBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Только для заявок с типом GTD: дата до которой включительно нужно исполнить заявку. Если не исполнить - на отменяется
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Date gtdDate = 21;</code>
     */
    public Builder mergeGtdDate(dominvest.backend.core.model.Date value) {
      if (gtdDateBuilder_ == null) {
        if (gtdDate_ != null) {
          gtdDate_ =
            dominvest.backend.core.model.Date.newBuilder(gtdDate_).mergeFrom(value).buildPartial();
        } else {
          gtdDate_ = value;
        }
        onChanged();
      } else {
        gtdDateBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Только для заявок с типом GTD: дата до которой включительно нужно исполнить заявку. Если не исполнить - на отменяется
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Date gtdDate = 21;</code>
     */
    public Builder clearGtdDate() {
      if (gtdDateBuilder_ == null) {
        gtdDate_ = null;
        onChanged();
      } else {
        gtdDate_ = null;
        gtdDateBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Только для заявок с типом GTD: дата до которой включительно нужно исполнить заявку. Если не исполнить - на отменяется
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Date gtdDate = 21;</code>
     */
    public dominvest.backend.core.model.Date.Builder getGtdDateBuilder() {
      
      onChanged();
      return getGtdDateFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Только для заявок с типом GTD: дата до которой включительно нужно исполнить заявку. Если не исполнить - на отменяется
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Date gtdDate = 21;</code>
     */
    public dominvest.backend.core.model.DateOrBuilder getGtdDateOrBuilder() {
      if (gtdDateBuilder_ != null) {
        return gtdDateBuilder_.getMessageOrBuilder();
      } else {
        return gtdDate_ == null ?
            dominvest.backend.core.model.Date.getDefaultInstance() : gtdDate_;
      }
    }
    /**
     * <pre>
     * Только для заявок с типом GTD: дата до которой включительно нужно исполнить заявку. Если не исполнить - на отменяется
     * </pre>
     *
     * <code>.dominvest.backend.core.model.Date gtdDate = 21;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        dominvest.backend.core.model.Date, dominvest.backend.core.model.Date.Builder, dominvest.backend.core.model.DateOrBuilder> 
        getGtdDateFieldBuilder() {
      if (gtdDateBuilder_ == null) {
        gtdDateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            dominvest.backend.core.model.Date, dominvest.backend.core.model.Date.Builder, dominvest.backend.core.model.DateOrBuilder>(
                getGtdDate(),
                getParentForChildren(),
                isClean());
        gtdDate_ = null;
      }
      return gtdDateBuilder_;
    }

    private int portfolioId_ ;
    /**
     * <pre>
     * Не заполняется
     * </pre>
     *
     * <code>uint32 portfolioId = 22;</code>
     */
    public int getPortfolioId() {
      return portfolioId_;
    }
    /**
     * <pre>
     * Не заполняется
     * </pre>
     *
     * <code>uint32 portfolioId = 22;</code>
     */
    public Builder setPortfolioId(int value) {
      
      portfolioId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Не заполняется
     * </pre>
     *
     * <code>uint32 portfolioId = 22;</code>
     */
    public Builder clearPortfolioId() {
      
      portfolioId_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object requestId_ = "";
    /**
     * <pre>
     * Сквозной идентификатор запроса, по факту не заполняется
     * </pre>
     *
     * <code>string requestId = 23;</code>
     */
    public java.lang.String getRequestId() {
      java.lang.Object ref = requestId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        requestId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Сквозной идентификатор запроса, по факту не заполняется
     * </pre>
     *
     * <code>string requestId = 23;</code>
     */
    public com.google.protobuf.ByteString
        getRequestIdBytes() {
      java.lang.Object ref = requestId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        requestId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Сквозной идентификатор запроса, по факту не заполняется
     * </pre>
     *
     * <code>string requestId = 23;</code>
     */
    public Builder setRequestId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      requestId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Сквозной идентификатор запроса, по факту не заполняется
     * </pre>
     *
     * <code>string requestId = 23;</code>
     */
    public Builder clearRequestId() {
      
      requestId_ = getDefaultInstance().getRequestId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Сквозной идентификатор запроса, по факту не заполняется
     * </pre>
     *
     * <code>string requestId = 23;</code>
     */
    public Builder setRequestIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      requestId_ = value;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:dominvest.backend.core.model.Order)
  }

  // @@protoc_insertion_point(class_scope:dominvest.backend.core.model.Order)
  private static final dominvest.backend.core.model.Order DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new dominvest.backend.core.model.Order();
  }

  public static dominvest.backend.core.model.Order getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Order>
      PARSER = new com.google.protobuf.AbstractParser<Order>() {
    @java.lang.Override
    public Order parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Order(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Order> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Order> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public dominvest.backend.core.model.Order getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

