// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TransactionType.proto

package dominvest.backend.core.model.txn;

public final class TransactionTypeOuterClass {
  private TransactionTypeOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code dominvest.backend.core.model.txn.TransactionType}
   */
  public enum TransactionType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NONE = 0;</code>
     */
    NONE(0),
    /**
     * <pre>
     *не используется бэк-офисом
     * </pre>
     *
     * <code>BUY = 1;</code>
     */
    BUY(1),
    /**
     * <pre>
     *не используется бэк-офисом
     * </pre>
     *
     * <code>SELL = 2;</code>
     */
    SELL(2),
    /**
     * <code>TAX = 3;</code>
     */
    TAX(3),
    /**
     * <code>TOPUP = 4;</code>
     */
    TOPUP(4),
    /**
     * <code>WITHDRAW = 5;</code>
     */
    WITHDRAW(5),
    /**
     * <code>COUPON = 6;</code>
     */
    COUPON(6),
    /**
     * <code>DIVIDENDS = 7;</code>
     */
    DIVIDENDS(7),
    /**
     * <pre>
     *не используется бэк-офисом
     * </pre>
     *
     * <code>BROKERCOMMISSION = 8;</code>
     */
    BROKERCOMMISSION(8),
    /**
     * <pre>
     *не используется бэк-офисом
     * </pre>
     *
     * <code>EXCHANGECOMMISSION = 9;</code>
     */
    EXCHANGECOMMISSION(9),
    /**
     * <code>REPAYMENT = 10;</code>
     */
    REPAYMENT(10),
    /**
     * <code>AMORTIZATION = 11;</code>
     */
    AMORTIZATION(11),
    /**
     * <code>SPLIT = 12;</code>
     */
    SPLIT(12),
    /**
     * <code>OFFER = 13;</code>
     */
    OFFER(13),
    /**
     * <code>DEPOCOMMISSION = 14;</code>
     */
    DEPOCOMMISSION(14),
    /**
     * <code>TAXRETURN = 15;</code>
     */
    TAXRETURN(15),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>NONE = 0;</code>
     */
    public static final int NONE_VALUE = 0;
    /**
     * <pre>
     *не используется бэк-офисом
     * </pre>
     *
     * <code>BUY = 1;</code>
     */
    public static final int BUY_VALUE = 1;
    /**
     * <pre>
     *не используется бэк-офисом
     * </pre>
     *
     * <code>SELL = 2;</code>
     */
    public static final int SELL_VALUE = 2;
    /**
     * <code>TAX = 3;</code>
     */
    public static final int TAX_VALUE = 3;
    /**
     * <code>TOPUP = 4;</code>
     */
    public static final int TOPUP_VALUE = 4;
    /**
     * <code>WITHDRAW = 5;</code>
     */
    public static final int WITHDRAW_VALUE = 5;
    /**
     * <code>COUPON = 6;</code>
     */
    public static final int COUPON_VALUE = 6;
    /**
     * <code>DIVIDENDS = 7;</code>
     */
    public static final int DIVIDENDS_VALUE = 7;
    /**
     * <pre>
     *не используется бэк-офисом
     * </pre>
     *
     * <code>BROKERCOMMISSION = 8;</code>
     */
    public static final int BROKERCOMMISSION_VALUE = 8;
    /**
     * <pre>
     *не используется бэк-офисом
     * </pre>
     *
     * <code>EXCHANGECOMMISSION = 9;</code>
     */
    public static final int EXCHANGECOMMISSION_VALUE = 9;
    /**
     * <code>REPAYMENT = 10;</code>
     */
    public static final int REPAYMENT_VALUE = 10;
    /**
     * <code>AMORTIZATION = 11;</code>
     */
    public static final int AMORTIZATION_VALUE = 11;
    /**
     * <code>SPLIT = 12;</code>
     */
    public static final int SPLIT_VALUE = 12;
    /**
     * <code>OFFER = 13;</code>
     */
    public static final int OFFER_VALUE = 13;
    /**
     * <code>DEPOCOMMISSION = 14;</code>
     */
    public static final int DEPOCOMMISSION_VALUE = 14;
    /**
     * <code>TAXRETURN = 15;</code>
     */
    public static final int TAXRETURN_VALUE = 15;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TransactionType valueOf(int value) {
      return forNumber(value);
    }

    public static TransactionType forNumber(int value) {
      switch (value) {
        case 0: return NONE;
        case 1: return BUY;
        case 2: return SELL;
        case 3: return TAX;
        case 4: return TOPUP;
        case 5: return WITHDRAW;
        case 6: return COUPON;
        case 7: return DIVIDENDS;
        case 8: return BROKERCOMMISSION;
        case 9: return EXCHANGECOMMISSION;
        case 10: return REPAYMENT;
        case 11: return AMORTIZATION;
        case 12: return SPLIT;
        case 13: return OFFER;
        case 14: return DEPOCOMMISSION;
        case 15: return TAXRETURN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TransactionType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TransactionType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TransactionType>() {
            public TransactionType findValueByNumber(int number) {
              return TransactionType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return dominvest.backend.core.model.txn.TransactionTypeOuterClass.getDescriptor().getEnumTypes().get(0);
    }

    private static final TransactionType[] VALUES = values();

    public static TransactionType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TransactionType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:dominvest.backend.core.model.txn.TransactionType)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\025TransactionType.proto\022 dominvest.backe" +
      "nd.core.model.txn*\363\001\n\017TransactionType\022\010\n" +
      "\004NONE\020\000\022\007\n\003BUY\020\001\022\010\n\004SELL\020\002\022\007\n\003TAX\020\003\022\t\n\005T" +
      "OPUP\020\004\022\014\n\010WITHDRAW\020\005\022\n\n\006COUPON\020\006\022\r\n\tDIVI" +
      "DENDS\020\007\022\024\n\020BROKERCOMMISSION\020\010\022\026\n\022EXCHANG" +
      "ECOMMISSION\020\t\022\r\n\tREPAYMENT\020\n\022\020\n\014AMORTIZA" +
      "TION\020\013\022\t\n\005SPLIT\020\014\022\t\n\005OFFER\020\r\022\022\n\016DEPOCOMM" +
      "ISSION\020\016\022\r\n\tTAXRETURN\020\017b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
